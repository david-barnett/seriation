[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Hahsler. Author, maintainer, copyright holder. Christian Buchta. Author, copyright holder. Kurt Hornik. Author, copyright holder. Fionn Murtagh. Contributor, copyright holder. Michael Friendly. Contributor. Michael Brusco. Contributor, copyright holder. Stephanie Stahl. Contributor, copyright holder. Hans-Friedrich Koehn. Contributor, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hahsler M, Buchta C, Hornik K (2022). seriation: Infrastructure Ordering Objects Using Seriation. R package version 1.4.0.9000, https://github.com/mhahsler/seriation. Hahsler M, Hornik K, Buchta C (2008). “Getting things order:  introduction R package seriation.” Journal Statistical Software, 25(3), 1–34. ISSN 1548-7660, doi:10.18637/jss.v025.i03. Hahsler M (2017). “experimental comparison seriation methods one-mode two-way data.” European Journal Operational Research, 257(1), 133–143. doi:10.1016/j.ejor.2016.08.066.","code":"@Manual{,   title = {seriation: Infrastructure for Ordering Objects Using Seriation},   author = {Michael Hahsler and Christian Buchta and Kurt Hornik},   year = {2022},   note = {R package version 1.4.0.9000},   url = {https://github.com/mhahsler/seriation}, } @Article{,   title = {Getting things in order:  An introduction to the R package seriation},   author = {Michael Hahsler and Kurt Hornik and Christian Buchta},   year = {2008},   journal = {Journal of Statistical Software},   volume = {25},   number = {3},   pages = {1--34},   doi = {10.18637/jss.v025.i03},   month = {March},   issn = {1548-7660}, } @Article{,   title = {An experimental comparison of seriation methods for one-mode two-way data},   author = {Michael Hahsler},   year = {2017},   journal = {European Journal of Operational Research},   volume = {257},   number = {1},   pages = {133--143},   doi = {10.1016/j.ejor.2016.08.066},   month = {February}, }"},{"path":"/index.html","id":"id_-r-package-seriation---infrastructure-for-ordering-objects-using-seriation","dir":"","previous_headings":"","what":"Infrastructure for Ordering Objects Using Seriation","title":"Infrastructure for Ordering Objects Using Seriation","text":"package provides infrastructure ordering objects implementation several seriation/sequencing/ordination techniques reorder matrices, dissimilarity matrices, dendrograms (see full list). Also provides (optimally) reordered heatmaps, color images clustering visualizations like dissimilarity plots, visual assessment cluster tendency plots (VAT iVAT).","code":""},{"path":"/index.html","id":"available-seriation-method","dir":"","previous_headings":"","what":"Available Seriation Method","title":"Infrastructure for Ordering Objects Using Seriation","text":"following methods available reorder dissimilarity data: ARSA - Simulated annealing (linear seriation) Branch--bound minimize unweighted/weighted column gradient DendSer - Dendrogram seriation heuristic optimize various criteria GA - Genetic algorithm warm start optimize various criteria GW - Hierarchical clustering reordered Gruvaeus Wainer heuristic HC - Hierarchical clustering (single link, avg. link, complete link) Identity permutation MDS - Multidimensional scaling (metric, non-metric, angle) OLO - Hierarchical clustering optimal leaf ordering OPTICS - Ordering points identify clustering structure. QAP - Quadratic assignment problem heuristic (2-SUM, linear seriation, inertia, banded anti-Robinson form) R2E - Rank-two ellipse seriation Random permutation Spectral seriation (unnormalized, normalized) SPIN - Sorting points neighborhoods (neighborhood algorithm, side--site algorithm) TSP - Traveling sales person solver minimize Hamiltonian path length TSNE - Order 1D t-distributed stochastic neighbor embedding (t-SNE) UMAP - Order 1D embedding produced uniform manifold approximation projection VAT - Order visual assessment clustering tendency ordering detailed comparison methods available paper experimental comparison seriation methods one-mode two-way data. (read preprint). following methods available reorder rows columns matrices: BEA - Bond Energy Algorithm maximize measure effectiveness () CA - calculates correspondence analysis matrix frequencies reorders according scores correspondence analysis dimension Identity permutation PCA - orders along first principal component angle projection first two principal components Random permutation TSP - Traveling sales person solver maximize ","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Infrastructure for Ordering Objects Using Seriation","text":"Stable CRAN version: Install within R Current development version: Install r-universe.","code":"install.packages(\"seriation\") install.packages(\"seriation\", repos = \"https://mhahsler.r-universe.dev\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Infrastructure for Ordering Objects Using Seriation","text":"Load library, read data calculate distances. use default seriation.  Compare quality.","code":"library(seriation) data(\"SupremeCourt\")  # joint probability of disagreement SupremeCourt ##           Breyer Ginsburg Kennedy OConnor Rehnquist Scalia Souter Stevens ## Breyer      0.00    0.120    0.25    0.21      0.30  0.353  0.118    0.16 ## Ginsburg    0.12    0.000    0.27    0.25      0.31  0.370  0.096    0.15 ## Kennedy     0.25    0.267    0.00    0.16      0.12  0.188  0.248    0.33 ## OConnor     0.21    0.252    0.16    0.00      0.16  0.207  0.220    0.33 ## Rehnquist   0.30    0.308    0.12    0.16      0.00  0.143  0.293    0.40 ## Scalia      0.35    0.370    0.19    0.21      0.14  0.000  0.338    0.44 ## Souter      0.12    0.096    0.25    0.22      0.29  0.338  0.000    0.17 ## Stevens     0.16    0.145    0.33    0.33      0.40  0.438  0.169    0.00 ## Thomas      0.36    0.368    0.18    0.21      0.14  0.066  0.331    0.44 ##           Thomas ## Breyer     0.359 ## Ginsburg   0.368 ## Kennedy    0.177 ## OConnor    0.205 ## Rehnquist  0.137 ## Scalia     0.066 ## Souter     0.331 ## Stevens    0.436 ## Thomas     0.000 d <- as.dist(SupremeCourt) order <- seriate(d) order ## object of class 'ser_permutation', 'list' ## contains permutation vectors for 1-mode data ##  ##   vector length seriation method ## 1             9         Spectral pimage(d, diag = TRUE, upper = TRUE, main = \"judges in original alphabetical order\") pimage(d, order, diag = TRUE, upper = TRUE, main = \"judges reordered by seriation\") rbind(alphabetical = criterion(d), seriated = criterion(d, order)) ##              2SUM AR_deviations AR_events BAR Cor_R Gradient_raw ## alphabetical  872        10.304        80 1.8 0.024            8 ## seriated      811         0.064         5 1.1 0.085          158 ##              Gradient_weighted Inertia Lazy_path_length Least_squares LS  ME ## alphabetical              0.54     267              6.9           967 99  99 ## seriated                 19.76     364              4.6           942 86 101 ##              Moore_stress Neumann_stress Path_length RGAR ## alphabetical          7.0            3.9         1.8 0.48 ## seriated              2.5            1.3         1.1 0.03"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Infrastructure for Ordering Objects Using Seriation","text":"Michael Hahsler, Kurt Hornik Christian Buchta, Getting Things Order: Introduction R Package seriation, Journal Statistical Software, 25(3), 2008. Michael Hahsler. experimental comparison seriation methods one-mode two-way data. European Journal Operational Research, 257:133-143, 2017. (read preprint) Reference manual package seriation.","code":""},{"path":"/reference/Chameleon.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Data Sets used for the CHAMELEON Clustering Algorithm — Chameleon","title":"2D Data Sets used for the CHAMELEON Clustering Algorithm — Chameleon","text":"Several 2D data sets created evaluate CHAMELEON clustering algorithm paper Karypis et al (1999).","code":""},{"path":"/reference/Chameleon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2D Data Sets used for the CHAMELEON Clustering Algorithm — Chameleon","text":"chameleon_ds4: format 8,000 x 2 data.frame. chameleon_ds5: format 8,000 x 2 data.frame. chameleon_ds7: format 10,000 x 2 data.frame. chameleon_ds8: format 8,000 x 2 data.frame.","code":""},{"path":"/reference/Chameleon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"2D Data Sets used for the CHAMELEON Clustering Algorithm — Chameleon","text":"Karypis, G., EH. Han, V. Kumar (1999): CHAMELEON: Hierarchical Clustering Algorithm Using Dynamic Modeling, IEEE Computer, 32(8): 68--75. doi:10.1109/2.781637","code":""},{"path":"/reference/Chameleon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Data Sets used for the CHAMELEON Clustering Algorithm — Chameleon","text":"","code":"data(Chameleon)  plot(chameleon_ds4, cex = .1)  plot(chameleon_ds5, cex = .1)  plot(chameleon_ds7, cex = .1)  plot(chameleon_ds8, cex = .1)"},{"path":"/reference/Irish.html","id":null,"dir":"Reference","previous_headings":"","what":"Irish Referendum Data Set — Irish","title":"Irish Referendum Data Set — Irish","text":"data matrix containing results 8 referenda 41 Irish communities used Falguerolles et al (1997).","code":""},{"path":"/reference/Irish.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Irish Referendum Data Set — Irish","text":"format 41 x 9 matrix. Two values missing.","code":""},{"path":"/reference/Irish.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Irish Referendum Data Set — Irish","text":"data kindly provided Guenter Sawitzki.","code":""},{"path":"/reference/Irish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Irish Referendum Data Set — Irish","text":"Column 6 contains size Electorate 1992.","code":""},{"path":"/reference/Irish.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Irish Referendum Data Set — Irish","text":"de Falguerolles, ., Friedrich, F., Sawitzki, G. (1997): Tribute J. Bertin's Graphical Data Analysis. : Proceedings SoftStat '97 (Advances Statistical Software 6), 11--20.","code":""},{"path":"/reference/Irish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Irish Referendum Data Set — Irish","text":"","code":"data(Irish)"},{"path":"/reference/LS.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighborhood functions for Seriation Method SA — LS","title":"Neighborhood functions for Seriation Method SA — LS","text":"Definition different local neighborhood functions method \"SA\" seriate().","code":""},{"path":"/reference/LS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighborhood functions for Seriation Method SA — LS","text":"","code":"LS_swap(o, pos = sample.int(length(o), 2))  LS_insert(o, pos = sample.int(length(o), 2))  LS_reverse(o, pos = sample.int(length(o), 2))  LS_mixed(o, pos = sample.int(length(o), 2))"},{"path":"/reference/LS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighborhood functions for Seriation Method SA — LS","text":"o integer vector order pos random positions used local move.","code":""},{"path":"/reference/LS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighborhood functions for Seriation Method SA — LS","text":"returns new order vector representing random neighbor.","code":""},{"path":"/reference/LS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Neighborhood functions for Seriation Method SA — LS","text":"Local neighborhood functions LS_insert, LS_swap, LS_reverse, LS_mix (1/3 insertion, 1/3 swap 1/3 reverse). neighborhood function can defined.","code":""},{"path":"/reference/Munsingen.html","id":null,"dir":"Reference","previous_headings":"","what":"Hodson's Munsingen Data Set — Munsingen","title":"Hodson's Munsingen Data Set — Munsingen","text":"data set contains grave times artifact incidence matrix Celtic Münsingen-Rain cemetery Switzerland provided Hodson (1968) published Kendall 1971.","code":""},{"path":"/reference/Munsingen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hodson's Munsingen Data Set — Munsingen","text":"59 x 70 0-1 matrix. Rows (graves) columns (artifacts) order determined Hodson (1968).","code":""},{"path":"/reference/Munsingen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hodson's Munsingen Data Set — Munsingen","text":"Hodson, F.R. (1968): La Tene Cemetery Münsingen-Rain. Stämpfli, Bern. Kendall, D.G. (1971): Seriation abundance matrices. : Hodson, F.R., Kendall, D.G. Tautu, P., (Editors). Mathematics Archaeological Historical Sciences, Edinburgh University Press, Edinburgh, 215--232.","code":""},{"path":"/reference/Munsingen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hodson's Munsingen Data Set — Munsingen","text":"","code":"data(\"Munsingen\")  ## Seriation method after Kendall (1971) ## Kendall's square symmetric matrix S and SoS S <- function(x, w = 1) {   sij <- function(i , j) w * sum(pmin(x[i,], x[j,]))   h <- nrow(x)   r <- matrix(ncol = h, nrow =h)   for(i in 1:h) for (j in 1:h)  r[i,j] <- sij(i,j)   r }  SoS <- function(x) S(S(x))  ## Kendall's horse shoe (Hamiltonian arc) horse_shoe_plot <- function(mds, sigma, threshold = mean(sigma), ...) {     plot(mds, main = paste(\"Kendall's horse shoe with th =\", threshold), ...)     l <- which(sigma > threshold, arr.ind=TRUE)     for(i in 1:nrow(l))  lines(rbind(mds[l[i,1],], mds[l[i,2],])) }  ## shuffle data x <- Munsingen[sample(nrow(Munsingen)),]  ## calculate matrix and do isoMDS (from package MASS) sigma <- SoS(x) library(\"MASS\") mds <- isoMDS(1/(1+sigma))$points #> initial  value 21.388870  #> iter   5 value 15.513984 #> final  value 15.439207  #> converged  ## plot Kendall's horse shoe horse_shoe_plot(mds, sigma)  ## find order using a TSP library(\"TSP\") tour <- solve_TSP(insert_dummy(TSP(dist(mds)), label = \"cut\"),     method = \"2-opt\", control = list(rep = 15)) #> Warning: executing %dopar% sequentially: no parallel backend registered tour <- cut_tour(tour, \"cut\") lines(mds[tour,], col = \"red\", lwd = 2)   ## create and plot order order <- ser_permutation(tour, 1:ncol(x)) bertinplot(x, order, options= list(panel=panel.circles,     rev = TRUE)) #> Warning: Unknown parameters: options #> Available parameter (with default values): #> panel.function\t =  function (value, spacing, hl)  {     grid.rect(x = seq(length(value)), y = spacing/2, width = 1 - spacing, height = value * (1 - spacing), just = c(\"centre\", \"bottom\"), default.units = \"native\", gp = gpar(fill = hl)) } #> flip_axes\t =  TRUE #> frame\t =  FALSE #> spacing\t =  0.2 #> margins\t =  c(5, 4, 8, 8) #> gp_labels\t =  list() #> gp_panels\t =  list() #> shading\t =  NULL #> shading_col\t =  c(\"#E2E2E2\", \"#E0E1E2\", \"#DFDFE1\", \"#DDDDE0\", \"#DBDBDF\", \"#D9DADF\", \"#D7D8DE\", \"#D5D6DD\", \"#D3D4DC\", \"#D1D3DB\", \"#CFD1DB\", \"#CDCFDA\", \"#CCCDD9\", \"#CACCD8\", \"#C8CAD8\", \"#C6C8D7\", \"#C4C7D6\", \"#C2C5D5\", \"#C0C3D5\", \"#BEC1D4\", \"#BDC0D3\", \"#BBBED2\", \"#B9BCD2\", \"#B7BBD1\", \"#B5B9D0\", \"#B3B7CF\", \"#B1B5CE\", \"#AFB4CE\", \"#AEB2CD\", \"#ACB0CC\", \"#AAAFCB\", \"#A8ADCB\", \"#A6ABCA\", \"#A4AAC9\", \"#A2A8C8\", \"#A1A6C8\", \"#9FA5C7\", \"#9DA3C6\", \"#9BA1C5\", \"#99A0C4\", \"#979EC4\", \"#959CC3\", \"#949BC2\", \"#9299C1\", \"#9097C1\", \"#8E96C0\",  \"#8C94BF\", \"#8A92BE\", \"#8891BE\", \"#878FBD\", \"#858DBC\", \"#838CBB\", \"#818ABB\", \"#7F89BA\", \"#7D87B9\", \"#7B85B8\", \"#7984B8\", \"#7882B7\", \"#7680B6\", \"#747FB6\", \"#727DB5\", \"#707CB4\", \"#6E7AB3\", \"#6C78B3\", \"#6A77B2\", \"#6875B1\", \"#6674B1\", \"#6472B0\", \"#6370AF\", \"#616FAF\", \"#5F6DAE\", \"#5D6CAD\", \"#5B6AAD\", \"#5968AC\", \"#5767AC\", \"#5565AB\", \"#5264AA\", \"#5062AA\", \"#4E61A9\", \"#4C5FA9\", \"#4A5DA8\", \"#485CA8\", \"#455AA7\", \"#4359A7\", \"#4157A6\", \"#3E55A6\", \"#3C54A6\", \"#3952A5\", \"#3751A5\", \"#344FA5\", \"#314EA4\", \"#2E4CA4\",  \"#2B4AA4\", \"#2749A4\", \"#2347A4\", \"#1F45A4\", \"#1A44A4\", \"#1442A4\", \"#0C40A4\", \"#023FA5\") #> newpage\t =  TRUE #> pop\t =  TRUE #> verbose\t =  FALSE   ## compare criterion values rbind(     random = criterion(x),     reordered = criterion(x, order),     Hodson = criterion(Munsingen)    ) #>               Cor_R  ME Moore_stress Neumann_stress #> random    0.1334324 139         3506           1570 #> reordered 0.4456162 222         2810           1274 #> Hodson    0.9423637 239         2574           1206"},{"path":"/reference/Psych24.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of 24 Psychological Test for 8th Grade Students — Psych24","title":"Results of 24 Psychological Test for 8th Grade Students — Psych24","text":"data set collected Holzinger Swineford (1939) consists results 24 psychological tests given 145 seventh eighth grade students Chicago suburb. data set contains correlation matrix 24 test results. data set also used example visualization cluster analysis Ling (1973).","code":""},{"path":"/reference/Psych24.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results of 24 Psychological Test for 8th Grade Students — Psych24","text":"24 x 24 correlation matrix.","code":""},{"path":"/reference/Psych24.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Results of 24 Psychological Test for 8th Grade Students — Psych24","text":"Holzinger, K. L., Swineford, F. (1939): study factor analysis: stability bi-factor solution. Supplementary Educational Monograph, . 48. Chicago: University Chicago Press. Ling, R. L. (1973): computer generated aid cluster analysis. Communications ACM, 16(6), pp. 355--361.","code":""},{"path":"/reference/Psych24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results of 24 Psychological Test for 8th Grade Students — Psych24","text":"","code":"data(\"Psych24\")  ## create a dist object and also get rid of the one negative entry in the ## correlation matrix d <- as.dist(1 - abs(Psych24))  pimage(d)   ## do hclust as in Ling (1973) hc <- hclust(d, method = \"complete\") plot(hc)   pimage(d, hc)   ## use seriation order <- seriate(d, method = \"tsp\") #order <- seriate(d, method = \"tsp\", control = list(method = \"concorde\")) pimage(d, order)"},{"path":"/reference/SupremeCourt.html","id":null,"dir":"Reference","previous_headings":"","what":"Voting Patterns in the Second Rehnquist U.S. Supreme Court — SupremeCourt","title":"Voting Patterns in the Second Rehnquist U.S. Supreme Court — SupremeCourt","text":"Contains (subset ) decisions stable 8-yr period 1995-2002 second Rehnquist Supreme Court. Decisions aggregated joint probability disagreement judges.","code":""},{"path":"/reference/SupremeCourt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Voting Patterns in the Second Rehnquist U.S. Supreme Court — SupremeCourt","text":"square, symmetric 9--9 matrix joint probability disagreement.","code":""},{"path":"/reference/SupremeCourt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Voting Patterns in the Second Rehnquist U.S. Supreme Court — SupremeCourt","text":"","code":"Sirovich, L. (2003). A pattern analysis of the second Rehnquist U.S. Supreme Court. \\emph{Proceedings of the National Academy of Sciences of the United States of America,} 100, 7432-7437. \\doi{10.1073/pnas.1132164100}"},{"path":"/reference/SupremeCourt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Voting Patterns in the Second Rehnquist U.S. Supreme Court — SupremeCourt","text":"Michael Hahsler","code":""},{"path":"/reference/SupremeCourt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Voting Patterns in the Second Rehnquist U.S. Supreme Court — SupremeCourt","text":"","code":"data(\"SupremeCourt\")  # joint probability of disagreement SupremeCourt #>            Breyer Ginsburg Kennedy OConnor Rehnquist  Scalia  Souter Stevens #> Breyer    0.00000  0.11966 0.25000 0.20940   0.29915 0.35256 0.11752 0.16239 #> Ginsburg  0.11966  0.00000 0.26790 0.25214   0.30769 0.36966 0.09615 0.14530 #> Kennedy   0.25000  0.26709 0.00000 0.15598   0.12179 0.18803 0.24786 0.32692 #> OConnor   0.20940  0.25214 0.15598 0.00000   0.16239 0.20726 0.22009 0.32906 #> Rehnquist 0.29915  0.30769 0.12179 0.16239   0.00000 0.14316 0.29274 0.40171 #> Scalia    0.35256  0.36966 0.18803 0.20726   0.14316 0.00000 0.33761 0.43803 #> Souter    0.11752  0.09615 0.24790 0.22009   0.29274 0.33761 0.00000 0.16880 #> Stevens   0.16239  0.14530 0.32692 0.32906   0.40171 0.43803 0.16880 0.00000 #> Thomas    0.35897  0.36752 0.17735 0.20513   0.13675 0.06624 0.33120 0.43590 #>            Thomas #> Breyer    0.35897 #> Ginsburg  0.36752 #> Kennedy   0.17735 #> OConnor   0.20513 #> Rehnquist 0.13675 #> Scalia    0.06624 #> Souter    0.33120 #> Stevens   0.43590 #> Thomas    0.00000  d <- as.dist(SupremeCourt) o <- seriate(d) o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 1-mode data #>  #>   vector length seriation method #> 1             9         Spectral  # judges in original alphabetical order pimage(d, diag = TRUE, upper = TRUE)   # judges reordered by seriation based on similar decisions pimage(d, o, diag = TRUE, upper = TRUE)   # Use optimal leaf ordering (hierarchical clustering with reordering) # which uses a dendrogram o <- seriate(d, method = \"OLO\") o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 1-mode data #>  #>   vector length seriation method #> 1             9              OLO  plot(o[[1]])"},{"path":"/reference/Townships.html","id":null,"dir":"Reference","previous_headings":"","what":"Bertin's Characteristics of Townships — Townships","title":"Bertin's Characteristics of Townships — Townships","text":"data contains nine characteristics 16 townships. data set used Bertin (1981) illustrate conciseness presentation can improved seriating rows columns.","code":""},{"path":"/reference/Townships.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bertin's Characteristics of Townships — Townships","text":"matrix 16 0-1 variables (columns) indicating presence (1) absence (0) characteristics townships (rows).","code":""},{"path":"/reference/Townships.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bertin's Characteristics of Townships — Townships","text":"Bertin, J. (1981): Graphics Graphic Information Processing. Berlin, Walter de Gruyter.","code":""},{"path":"/reference/Townships.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bertin's Characteristics of Townships — Townships","text":"Michael Hahsler","code":""},{"path":"/reference/Townships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bertin's Characteristics of Townships — Townships","text":"","code":"data(\"Townships\")  ## original data pimage(Townships)  criterion(Townships) #>          Cor_R             ME   Moore_stress Neumann_stress  #>    -0.02834833    19.00000000   464.00000000   260.00000000   ## seriated data order <- seriate(Townships, method = \"BEA\", control = list(rep = 5)) pimage(Townships, order)  criterion(Townships, order) #>          Cor_R             ME   Moore_stress Neumann_stress  #>      0.2236349     62.0000000    234.0000000     92.0000000"},{"path":"/reference/VAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"Implements Visual Analysis Cluster Tendency Assessment (VAT; Bezdek Hathaway, 2002) Improved Visual Analysis Cluster Tendency Assessment (iVAT; Wang et al, 2010).","code":""},{"path":"/reference/VAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"","code":"VAT(x, upper_tri = TRUE, lower_tri = TRUE, ...)  iVAT(x, upper_tri = TRUE, lower_tri = TRUE, ...)  path_dist(x)  ggVAT(x, upper_tri = TRUE, lower_tri = TRUE, ...)  ggiVAT(x, upper_tri = TRUE, lower_tri = TRUE, ...)"},{"path":"/reference/VAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"x dist object. upper_tri, lower_tri logical indicating whether show upper lower triangle VAT matrix. ... arguments passed pimage regular plots ggpimage ggplot2 plots.","code":""},{"path":"/reference/VAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"Nothing.","code":""},{"path":"/reference/VAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"path_dist() redefines distance two objects minimum largest distances possible paths objects used iVAT.","code":""},{"path":"/reference/VAT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"Bezdek, J.C. Hathaway, R.J. (2002): VAT: tool visual assessment (cluster) tendency. Proceedings 2002 International Joint Conference Neural Networks (IJCNN '02), Volume: 3, 2225--2230. Havens, T.C. Bezdek, J.C. (2012): Efficient Formulation Improved Visual Assessment Cluster Tendency (iVAT) Algorithm, IEEE Transactions Knowledge Data Engineering, 24(5), 813--822. Wang L., U.T.V. Nguyen, J.C. Bezdek, C.. Leckie K. Ramamohanarao (2010): iVAT aVAT: Enhanced Visual Analysis Cluster Tendency Assessment, Proceedings PAKDD 2010, Part , LNAI 6118, 16--27.","code":""},{"path":[]},{"path":"/reference/VAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"Michael Hahsler","code":""},{"path":"/reference/VAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visual Analysis for Cluster Tendency Assessment (VAT/iVAT) — VAT","text":"","code":"## lines data set from Havens and Bezdek (2011) x <- create_lines_data(250) plot(x, xlim=c(-5,5), ylim=c(-3,3), cex=.2)  d <- dist(x)  ## create regular VAT VAT(d, main = \"VAT for Lines\")  ## same as: pimage(d, seriate(d, \"VAT\"))  ## ggplot2 version if (require(\"ggplot2\")) {   ggVAT(d) + labs(title = \"VAT\") } #> Loading required package: ggplot2   ## create iVAT which shows visually the three lines iVAT(d, main = \"iVAT for Lines\")  ## same as: ## d_path <- path_dist(d) ## pimage(d_path, seriate(d_path, \"VAT for Lines\"))  ## ggplot2 version if (require(\"ggplot2\")) {   ggiVAT(d) + labs(title = \"iVAT for Lines\") }   ## compare with dissplot (shows banded structures and relationship between ## center line and the two outer lines) dissplot(d, method = \"OLO_single\", main = \"Dissplot for Lines\", col = bluered(100, bias = .5))   ## compare with optimally reordered heatmap hmap(d, method = \"OLO_single\", main = \"Heatmap for Lines (opt. leaf ordering)\",   col = bluered(100, bias = .5))"},{"path":"/reference/Wood.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Expression Data for Wood Formation in Poplar Trees — Wood","title":"Gene Expression Data for Wood Formation in Poplar Trees — Wood","text":"data matrix containing sample normalized gene expression data 6 locations stem Popla trees published study Herzberg et al (2001). sample 136 genes selected Caraux Pinloche (2005).","code":""},{"path":"/reference/Wood.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene Expression Data for Wood Formation in Poplar Trees — Wood","text":"format 136 x 6 matrix.","code":""},{"path":"/reference/Wood.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gene Expression Data for Wood Formation in Poplar Trees — Wood","text":"data obtained http://www.atgc-montpellier.fr/permutmatrix/manual/Exemples/Wood/Wood.htm.","code":""},{"path":"/reference/Wood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gene Expression Data for Wood Formation in Poplar Trees — Wood","text":"Hertzberg M., H. Aspeborg, J. Schrader, . Andersson, R.Erlandsson, K. Blomqvist, R. Bhalerao, M. Uhlen, T. T. Teeri, J. Lundeberg, Bjoern Sundberg, P. Nilsson Goeran Sandberg (2001): transcriptional roadmap wood formation, PNAS, 98(25), 14732--14737. Caraux G. Pinloche S. (2005): PermutMatrix: graphical environment arrange gene expression profiles optimal linear order, Bioinformatics, 21(7) 1280--1281.","code":""},{"path":"/reference/Wood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Expression Data for Wood Formation in Poplar Trees — Wood","text":"","code":"data(Wood) head(Wood) #>                   P          A          B          C          D          E #> AI161452 -0.7546223 -2.2447910 -2.4157241 -0.8181829  1.0121892  0.8839819 #> AI161500 -2.0621934  0.2127532  0.3556842  0.2219739 -0.6714808  0.3477471 #> AI161513  0.1708342  1.3265617  0.4093247 -1.2003526 -3.3316990 -2.0194944 #> AI161572 -1.1837279 -1.5292043 -2.1512254 -1.0145349  1.1844282 -0.4033869 #> AI161573 -1.8637857 -2.1495779 -2.5108412 -0.8444706  1.4952223 -1.7662259 #> AI161629  1.5917360  1.0212036 -0.1519370 -1.3543136 -2.7099315 -1.3129411"},{"path":"/reference/Zoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoo Data Set — Zoo","title":"Zoo Data Set — Zoo","text":"database containing characteristics different animals. database created donated Richard S. Forsyth available UCI Machine Learning Repository (Newman et al, 1998).","code":""},{"path":"/reference/Zoo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zoo Data Set — Zoo","text":"data frame 101 observations following 17 variables. hair numeric vector feathers numeric vector eggs numeric vector milk numeric vector airborne numeric vector aquatic numeric vector predator numeric vector toothed numeric vector backbone numeric vector breathes numeric vector venomous numeric vector fins numeric vector legs numeric vector tail numeric vector domestic numeric vector catsize numeric vector class factor levels amphibian bird fish insect invertebrate mammal reptile","code":""},{"path":"/reference/Zoo.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Zoo Data Set — Zoo","text":"D.J. Newman, S. Hettich, C.L. Blake C.J. Merz (1998): UCI Repository machine learning databases, https://www.ics.uci.edu/~mlearn/MLRepository.html, University California, Irvine, Dept. Information Computer Sciences.","code":""},{"path":"/reference/Zoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zoo Data Set — Zoo","text":"","code":"data(\"Zoo\") x <- scale(Zoo[, -17])   d <- dist(x) pimage(d)   order <- seriate(d, method = \"tsp\") pimage(d, order)"},{"path":"/reference/bertinplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Bertin Matrix — bertinplot","title":"Plot a Bertin Matrix — bertinplot","text":"Plot data matrix cases variables. value represented symbol. Large values highlighted. Note Bertin arranges cases horizontally variables rows. matrix can rearranged using seriation techniques make structure data visible (see Falguerolles et al 1997).","code":""},{"path":"/reference/bertinplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Bertin Matrix — bertinplot","text":"","code":"bertinplot(   x,   order = NULL,   panel.function = panel.bars,   highlight = TRUE,   row_labels = TRUE,   col_labels = TRUE,   flip_axes = TRUE,   ... )  panel.bars(value, spacing, hl)  panel.circles(value, spacing, hl)  panel.rectangles(value, spacing, hl)  panel.squares(value, spacing, hl)  panel.tiles(value, spacing, hl)  panel.blocks(value, spacing, hl)  panel.lines(value, spacing, hl)  bertin_cut_line(x = NULL, y = NULL, col = \"red\")  ggbertinplot(   x,   order = NULL,   geom = \"bar\",   highlight = TRUE,   row_labels = TRUE,   col_labels = TRUE,   flip_axes = TRUE,   prop = FALSE,   ... )"},{"path":"/reference/bertinplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Bertin Matrix — bertinplot","text":"x data matrix. Note following Bertin, columns variables rows cases. behavior can reversed using reverse = TRUE options. order object class ser_permutation rearrange x plotting.  NULL, rearrangement performed. panel.function function produce symbols. Currently available functions panel.bars (default), panel.circles, panel.rectangles, panel.tiles panel.lines. circles squares neg. values represented dashed border. blocks blocks size (can used shading = TRUE). highlight logical scalar indicating whether use highlighting. TRUE, variables values greater variable-wise mean highlighted. control highlighting, also logical matrix matrix colors dimensions x can supplied. row_labels, col_labels logical indicating row column labels x displayed.  NULL labels displayed x contains appropriate dimname number labels 25 less. character vector appropriate length labels can also supplied. flip_axes logical indicating whether swap cases variables plot. default (TRUE) plot cases columns variables rows. ... ggbertinplot(): parameters passed ggpimage(). bertinplot(): parameters can include: xlab, ylab labels (default: use labels x). spacing relative space symbols (default: 0.2). shading use gray shades encode value instead highlighting (default: FALSE). shading.function function accepts single argument range \\([.1, .8]\\) returns valid corresponding color (e.g., using rgb()). frame plot grid separate symbols (default: FALSE). mar margins (see par()). gp_labels gpar object labels (see gpar()) gp_panels gpar object panels (see gpar()). newpage logical indicating whether start plot new page (see grid.newpage()). pop logical indicating whether pop created viewports (see pop.viewport())? value, spacing, hl used internally panel functions. col, y x bertin_cut_line() adding line bertinplot() (ggplot2-based). geom visualization type. Available ggplot2 geometries : \"tile\", \"rectangle\", \"circle\", \"line\", \"bar\", \"none\". prop logical; change aspect ratio cells image equal width height.","code":""},{"path":"/reference/bertinplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Bertin Matrix — bertinplot","text":"Nothing.","code":""},{"path":"/reference/bertinplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a Bertin Matrix — bertinplot","text":"plot organized matrix symbols. symbols drawn panel function, symbols row drawn one call function (using vectorization). interface panel function panel.myfunction(value, spacing, hl). value vector values row scaled 0 1, spacing contains relative space symbols hl logical vector indicating symbol highlighted. Cut lines can added existing Bertin plot using bertin_cut_line(x = NULL, y = NULL). x/y can number indicating draw cut line two columns/rows. x y specified one can select row/column can select range draw line span part row/column. important call bertinplot() option pop = FALSE. ggbertinplot() calls ggpimage() additional parameters passed .","code":""},{"path":"/reference/bertinplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot a Bertin Matrix — bertinplot","text":"de Falguerolles, ., Friedrich, F., Sawitzki, G. (1997): Tribute J. Bertin's Graphical Data Analysis. : Proceedings SoftStat '97 (Advances Statistical Software 6), 11--20.","code":""},{"path":[]},{"path":"/reference/bertinplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a Bertin Matrix — bertinplot","text":"Michael Hahsler","code":""},{"path":"/reference/bertinplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Bertin Matrix — bertinplot","text":"","code":"data(\"Irish\") scale_by_rank <- function(x) apply(x, 2, rank) x <- scale_by_rank(Irish[,-6])  # Use the the sum of absolute rank differences order <- c(   seriate(dist(x, \"minkowski\", p = 1)),   seriate(dist(t(x), \"minkowski\", p = 1)) )  # Plot bertinplot(x, order)   # Some alternative displays bertinplot(x, order, panel = panel.tiles, shading_col = bluered(100), highlight = FALSE)  bertinplot(x, order, panel = panel.circles, spacing = -.2)  bertinplot(x, order, panel = panel.rectangles)  bertinplot(x, order, panel = panel.lines)   # Plot with cut lines (we manually set the order here) order <- ser_permutation(c(21, 16, 19, 18, 14, 12, 20, 15,     17, 26, 13, 41,  7, 11, 5, 23, 28, 34, 31, 1, 38, 40,     3, 39,  4, 27, 24,  8, 37, 36, 25, 30, 33, 35,  2,     22, 32, 29, 10,  6,  9),     c(4, 2, 1, 6, 8, 7, 5, 3))  bertinplot(x, order, pop=FALSE) bertin_cut_line(, 4) ## horizontal line between rows 4 and 5 bertin_cut_line(, 7) ## separate \"Right to Life\" from the rest bertin_cut_line(14, c(0, 4)) ## separate a block of large values (vertically)   # ggplot2-based plots if (require(\"ggplot2\")) {   library(ggplot2)    # Default plot uses bars and highlighting values larger than the mean   ggbertinplot(x, order)    # highlight values in the 4th quartile   ggbertinplot(x, order, highlight = quantile(x, probs = .75))    # Use different geoms. \"none\" lets the user specify their own geom.   # Variables set are row, col and x (for the value).    ggbertinplot(x, order, geom = \"tile\", prop = TRUE)   ggbertinplot(x, order, geom = \"rectangle\")   ggbertinplot(x, order, geom = \"rectangle\", prop = TRUE)   ggbertinplot(x, order, geom = \"circle\")   ggbertinplot(x, order, geom = \"line\")    # Tiles with diverging color scale   ggbertinplot(x, order, geom = \"tile\", prop = TRUE) +     scale_fill_gradient2(midpoint = mean(x))    # Custom geom (geom = \"none\"). Defined variables are row, col, and x for the value   ggbertinplot(x, order, geom = \"none\", prop = FALSE) +     geom_point(aes(x = col, y = row, size = x, color = x > 30), pch = 15) +     scale_size(range = c(1, 10))    # Use a ggplot2 theme with theme_set()   old_theme <- theme_set(theme_minimal() +       theme(panel.grid = element_blank())     )   ggbertinplot(x, order, geom = \"bar\")   theme_set(old_theme) } #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/reference/create_lines_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Simulated Data for Seriation Evaluation — create_lines_data","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"Several functions create simulated data evaluate different aspects seriation algorithms criterion functions.","code":""},{"path":"/reference/create_lines_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"","code":"create_lines_data(n = 250)  create_ordered_data(   n = 250,   k = 2,   size = NULL,   spacing = 6,   path = \"linear\",   sd1 = 1,   sd2 = 0 )"},{"path":"/reference/create_lines_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"n number data points create. k number Gaussian components. size relative size (number points) components (length k). NULL components size. spacing space centers components. default 6 means components barely touch ds1 = 1 (3 standard deviations Gaussian component). path components arranged along \"linear\" \"circular\" path? sd1 variation direction along components.  value greater one means components mixing. sd2 variation perpendicular direction along components.  value greater 0 introduce anti-Robinson violation events.","code":""},{"path":"/reference/create_lines_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"data.frame created data.","code":""},{"path":"/reference/create_lines_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"create_lines_data() creates lines data set used iVAT() Havens Bezdeck (2012). create_ordered_data() versatile function creates \"orderable\" 2D data using Gaussian components along linear circular path. components equally spaced (spacing) along path. default spacing 6 ensures 2 adjacent components standard deviation one along direction path barely touch. standard deviation along path set sd1. standard deviation perpendicular path set sd2. value larger zero result data perfectly orderable (.e., resulting distance matrix perfect pre-anti-Robinson matrix contain anti-Robinson violation events seriation). Note circular path always creates anti-Robinson violation since circle broken point create linear order. function created package (Hahsler et al, 2021).","code":""},{"path":"/reference/create_lines_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"Havens, T.C. Bezdek, J.C. (2012): Efficient Formulation Improved Visual Assessment Cluster Tendency (iVAT) Algorithm, IEEE Transactions Knowledge Data Engineering, 24(5), 813--822. Michael Hahsler, Christian Buchta Kurt Hornik (2021). seriation: Infrastructure Ordering Objects Using Seriation. R package version 1.3.2. https://github.com/mhahsler/seriation","code":""},{"path":[]},{"path":"/reference/create_lines_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"Michael Hahsler","code":""},{"path":"/reference/create_lines_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Simulated Data for Seriation Evaluation — create_lines_data","text":"","code":"## lines data set from Havens and Bezdek (2011) x <- create_lines_data(250) plot(x, xlim = c(-5, 5), ylim = c(-3, 3), cex = .2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"OLO_single\"), col = bluered(100, bias = .5), key = TRUE)   ## create_ordered_data can produce many types of \"orderable\" data  ## perfect pre-Anti-Robinson matrix (with a single components) x <- create_ordered_data(250, k = 1) plot(x, cex = .2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"MDS\"), col = bluered(100, bias=.5), key = TRUE)   ## separated components x <- create_ordered_data(250, k = 5) plot(x, cex =.2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"MDS\"), col = bluered(100, bias = .5), key = TRUE)   ## overlapping components x <- create_ordered_data(250, k = 5, sd1 = 2) plot(x, cex = .2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"MDS\"), col = bluered(100, bias = .5), key = TRUE)   ## introduce anti-Robinson violations (a non-zero y value) x <- create_ordered_data(250, k = 5, sd1 = 2, sd2 = 5) plot(x, cex = .2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"MDS\"), col = bluered(100, bias = .5), key = TRUE)   ## circular path (has always violations) x <- create_ordered_data(250, k = 5, path = \"circular\", sd1 = 2) plot(x, cex = .2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"OLO\"), col = bluered(100, bias = .5), key = TRUE)   ## circular path (with more violations violations) x <- create_ordered_data(250, k = 5, path = \"circular\", sd1 = 2, sd2 = 1) plot(x, cex=.2, col = attr(x, \"id\"))  d <- dist(x) pimage(d, seriate(d, \"OLO\"), col = bluered(100, bias = .5), key = TRUE)"},{"path":"/reference/criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"Compute value different loss functions \\(L\\) merit function \\(M\\) data given permutation.","code":""},{"path":"/reference/criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"","code":"criterion(x, order = NULL, method = NULL, force_loss = FALSE, ...)  # S3 method for array criterion(x, order = NULL, method = NULL, force_loss = FALSE, ...)  # S3 method for dist criterion(x, order = NULL, method = NULL, force_loss = FALSE, ...)  # S3 method for matrix criterion(x, order = NULL, method = NULL, force_loss = FALSE, ...)"},{"path":"/reference/criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"x object class dist matrix (currently functions implemented array). order object class ser_permutation suitable x.  NULL, identity permutation used. method character vector names criteria employed (see list_criterion_methods()), NULL (default) case available criteria used. force_loss logical; merit function converted loss functions multiplying -1? ... additional parameters passed criterion method.","code":""},{"path":"/reference/criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"named vector real values.","code":""},{"path":"/reference/criterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"Criteria distance matrices (dist) symmetric dissimilarity matrix \\(D\\) elements \\(d(,j)\\) \\(, j = 1 \\ldots n\\), aim generally place low distance values close diagonal. following criteria judge quality certain permutation objects dissimilarity matrix currently implemented (detailed description experimental comparison see Hahsler (2017)): \"Gradient_raw\", \"Gradient_weighted\" Gradient measures (Hubert et al 2001).  symmetric dissimilarity matrix values rows columns increase moving away main diagonal called perfect anti-Robinson matrix (Robinson 1951). suitable merit measure quantifies divergence matrix anti-Robinson form $$ M(D) = \\sum_{=1}^n \\sum_{<k<j} f(d_{ij}, d_{ik}) + \\sum_{<k<j}     f(d_{ij}, d_{kj})$$ \\(f(.,.)\\) function defines violation satisfaction gradient condition object triple (\\(O_i, O_k, O_j\\)) counted. Hubert et al (2001) suggest two functions. first function given : $$f(z,y) = sign(y-z) = +1 z < y; 0 z = y; -1 z > y.$$ results raw number triples satisfying gradient constraints minus triples violate constraints. second function defined : $$f(z,y) = |y-z| sign(y-z) = y-z$$ weights satisfaction violation difference magnitude given absolute difference values. \"AR_events\", \"AR_deviations\" Anti-Robinson events (Chen 2002).  even simpler loss function can created way gradient measures concentrating violations . $$ L(D) = \\sum_{=1}^n \\sum_{<k<j} f(d_{ik}, d_{ij}) + \\sum_{<k<j} f(d_{kj}, d_{ij})$$ count violations use $$ f(z, y) = (z, y) = 1 z < y 0 otherwise.$$ \\((.)\\) indicator function returning 1 violations. Chen (2002) presented formulation equivalent loss function called violations anti-Robinson events also introduced weighted versions loss function resulting $$ f(z, y) = |y-z|(z, y) $$ using absolute deviations weights. \"RGAR\" Relative generalized Anti-Robinson events (Tien et al 2008).  Counts Anti-Robinson events variable band (window specified w defaults maximum \\(n-1\\)) around main diagonal normalizes maximum possible events. $$ L(D) = 1/m \\sum_{=1}^n \\sum_{(-w)\\le j<k<} (d_{ij} < d_{ik}) +     \\sum_{<j<k\\le(+w))} (d_{ij} > d_{ik}) $$ \\(m=(2/3-n)w + nw^2 - 2/3 w^3\\), maximal number possible anti-Robinson events window.  window size \\(w\\) represents number neighboring objects (number entries diagonal distance matrix) considered. window size \\(2 \\le w < n\\), smaller values result focusing local structure larger values look global structure. Alternatively, pct can used instead w specify window percentage \\(n\\). relative = FALSE can get GAR, .e., absolute number AR events window. \"BAR\" Banded Anti-Robinson Form (Earle Hurley 2015). Simplified measure closeness anti-Robinson form band size \\(b\\) \\(1 <= b < n\\) around diagonal. $$ L(D) = \\sum_{|-j|<=b} (b+1-|-j|) d_{ij} $$ \\(b = 1\\) measure reduces Hamiltonian path length.  \\(b = n-1\\) measure equivalent ARc defined (Earle Hurley, 2015). Note ARc equivalent Linear Seriation criterion (scaled 1/2). \\(b\\) defaults band 20% \\(n\\). \"Path_length\" Hamiltonian path length (Caraux Pinloche 2005). order objects dissimilarity matrix corresponds path graph node represents object visited exactly , .e., Hamilton path. length path defined sum edge weights, .e., dissimilarities. $$L(D) = \\sum_{=1}^{n-1} d_{,+1}$$ length Hamiltonian path equal value minimal span loss function (used Chen 2002).  notions related traveling salesperson problem (TSP). order unique non-finite distance values NA returned. \"Lazy_path_length\" Lazy path length (Earl Hurley 2015). weighted version Hamiltonian path criterion. loss function postpones larger distances later order (.e., lazy traveling sales person). $$L(D) = \\sum_{=1}^{n-1} (n-) d_{,+1}$$ Earl Hurley (2015) proposed criterion reordering visualizations concentrate closer objects first. \"Inertia\" Inertia criterion (Caraux Pinloche 2005). Measures moment inertia dissimilarity values around diagonal $$M(D) = \\sum_{=1}^n \\sum_{j=1}^n d(,j)|-j|^2$$ \\(|-j|\\) used measure distance diagonal \\(d(,j)\\) gives weight. criterion gives higher weight values farther away diagonal. increases quality. \"Least_squares\" Least squares criterion (Caraux Pinloche 2005). sum squares deviations dissimilarities rank differences (matrix) two elements: $$L(D) = \\sum_{=1}^n   \\sum_{j=1}^n (d(,j) - |-j|)^2,$$ \\(d(,j)\\) element dissimilarity matrix \\(D\\) \\(|-j|\\) rank difference objects. Note Euclidean distance used calculate \\(D\\) data matrix \\(X\\), order elements \\(X\\) projecting first principal component \\(X\\) minimizes criterion.  least squares criterion related unidimensional scaling. \"LS\" Linear Seriation Criterion (Hubert Schultz 1976). Weights distances absolute rank differences. $$L(D) \\sum_{,j=1}^n d(,j) (-|-j|)$$ \"2SUM\" 2-Sum Criterion (Barnard, Pothen, Simon 1993). 2-Sum loss criterion multiplies similarity objects squared rank differences. $$L(D) \\sum_{,j=1}^n 1/(1+d(,j)) (-j)^2,$$ \\(s(,j) = 1/(1+d(,j))\\) represents similarity objects \\(\\) \\(j\\). \"\", \"Moore_stress\", \"Neumann_stress\", \"Cor_R\" criteria defined general matrices (see definitions).  dissimilarity matrix first converted similarity matrix using \\(S = 1/(1+D)\\). different transformation required, perform transformation first supply matrix instead dist object. Criteria matrices (matrix) general matrix \\(X = x_{ij}\\), \\(= 1 \\ldots n\\) \\(j = 1 \\ldots m\\), currently following loss/merit functions implemented: \"\" Measure Effectiveness (McCormick 1972). measure effectiveness () matrix \\(X\\), defined $$M(X) = 1/2 \\sum_{=1}^{n} \\sum_{j=1}^{m}     x_{,j}(x_{,j-1}+x_{,j+1}+x_{-1,j}+x_{+1,j})$$ , convention $$x_{0,j}=x_{m+1,j}=x_{,0}=x_{,n+1}=0.$$ merit measure, .e. higher indicates better arrangement. Maximizing objective bond energy algorithm (BEA). defined matrices negative values. NA returned case. \"Cor_R\" Weighted correlation coefficient R developed Measure Effectiveness Moment Ordering Algorithm (Deutsch Martin 1971). R merit measure normalized value always lies \\([-1,1]\\).  special case square matrix \\(R=1\\) corresponds main diagonal filled, \\(R=0\\) random distribution value throughout array, \\(R=-1\\) opposite diagonal filled. \"Moore_stress\" Stress (Niermann 2005). Stress measures conciseness presentation matrix/table can seen purity function compares values matrix/table neighbors. stress measure used computed sum squared distances matrix entry adjacent entries. $$ L(X) = \\sum_{=1}^n \\sum_{j=1}^m \\sigma_{ij} $$ following types neighborhoods available: Moore: comprises eight adjacent entries. $$      \\sigma_{ij} = \\sum_{k=\\max(1,-1)}^{\\min(n,+1)}      \\sum_{l=\\max(1,j-1)}^{\\min(m,j+1)} (x_{ij} - x_{kl})^2 $$ Neumann: comprises four adjacent entries.  $$ \\sigma_{ij} =      \\sum_{k=\\max(1,-1)}^{\\min(n,+1)} (x_{ij} - x_{kj})^2 +      \\sum_{l=\\max(1,j-1)}^{\\min(m,j+1)} (x_{ij} - x_{il})^2 $$ major difference Moore Neumann neighborhood later contribution row column permutations stress independent thus can optimized independently.","code":""},{"path":"/reference/criterion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"Barnard, S.T., . Pothen, H. D. Simon (1993): Spectral Algorithm Envelope Reduction Sparse Matrices. Proceedings 1993 ACM/IEEE Conference Supercomputing, 493--502. Supercomputing '93. New York, NY, USA: ACM. Caraux, G. S. Pinloche (2005): Permutmatrix: Graphical Environment Arrange Gene Expression Profiles Optimal Linear Order, Bioinformatics, 21(7), 1280--1281. Chen, C.-H. (2002): Generalized association plots: Information visualization via iteratively generated correlation matrices, Statistica Sinica, 12(1), 7--29. Deutsch, S.B. J.J. Martin (1971): ordering algorithm analysis data arrays. Operational Research, 19(6), 1350--1362. doi:10.1287/opre.19.6.1350 Earle, D. C.B. Hurley (2015): Advances Dendrogram Seriation Application Visualization. Journal Computational Graphical Statistics, 24(1), 1--25. doi:10.1080/10618600.2013.874295 Hahsler, M. (2017): experimental comparison seriation methods one-mode two-way data. European Journal Operational Research, 257, 133--143. doi:10.1016/j.ejor.2016.08.066 Hubert, L. J. Schultz (1976): Quadratic Assignment General Data Analysis Strategy. British Journal Mathematical Statistical Psychology, 29(2). Blackwell Publishing Ltd. 190--241. doi:10.1111/j.2044-8317.1976.tb00714.x Hubert, L., P. Arabie, J. Meulman (2001): Combinatorial Data Analysis: Optimization Dynamic Programming. Society Industrial Mathematics. doi:10.1137/1.9780898718553 Niermann, S. (2005): Optimizing Ordering Tables Evolutionary Computation, American Statistician, 59(1), 41--46. doi:10.1198/000313005X22770 McCormick, W.T., P.J. Schweitzer T.W. White (1972): Problem decomposition data reorganization clustering technique, Operations Research, 20(5), 993-1009. doi:10.1287/opre.20.5.993 Robinson, W.S. (1951): method chronologically ordering archaeological deposits, American Antiquity, 16, 293--301. doi:10.2307/276978 Tien, Y-J., Yun-Shien Lee, Han-Ming Wu Chun-Houh Chen (2008): Methods simultaneously identifying coherent local clusters smooth global patterns gene expression profiles, BMC Bioinformatics, 9(155), 1--16. doi:10.1186/1471-2105-9-155","code":""},{"path":[]},{"path":"/reference/criterion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"Michael Hahsler","code":""},{"path":"/reference/criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Criterion for a Loss/Merit Function for Data Given a Permutation — criterion","text":"","code":"## create random data and calculate distances m <- matrix(runif(20),ncol=2) d <- dist(m)  ## get an order for rows (optimal for the least squares criterion) o <- seriate(d, method = \"MDS\") o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 1-mode data #>  #>   vector length seriation method #> 1            10              MDS  ## compare the values for all available criteria rbind(     unordered = criterion(d),     ordered = criterion(d, o) ) #>                2SUM AR_deviations AR_events      BAR      Cor_R Gradient_raw #> unordered 1050.9410     28.608090       133 15.46688 0.07664217          -26 #> ordered    959.9898      7.930161        55 10.52292 0.14411841          130 #>           Gradient_weighted   Inertia       LS Lazy_path_length Least_squares #> unordered          5.515768  995.6601 324.1060         27.90263      1297.956 #> ordered           47.864656 1221.5475 295.8734         17.29742      1241.491 #>                 ME Moore_stress Neumann_stress Path_length      RGAR #> unordered 83.82401     28.11981       18.32070    5.550852 0.5541667 #> ordered   86.55243     17.11011       10.16886    3.526988 0.2291667  ## compare RGAR by window size (from local to global) w <- 2:(nrow(m)-1) RGAR <- sapply(w, FUN = function (w)   criterion(d, o, method=\"RGAR\", w = w)) plot(w, RGAR, type = \"b\", ylim = c(0,1),   xlab = \"Windows size (w)\", main = \"RGAR by window size\")"},{"path":"/reference/dissplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissimilarity Plot — dissplot","title":"Dissimilarity Plot — dissplot","text":"Visualizes dissimilarity matrix using seriation matrix shading using method developed Hahsler Hornik (2011). Entries lower dissimilarities (higher similarity) plotted darker. Dissimilarity plots can used uncover hidden structure data judge cluster quality.","code":""},{"path":"/reference/dissplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissimilarity Plot — dissplot","text":"","code":"dissplot(   x,   labels = NULL,   method = \"Spectral\",   control = NULL,   lower_tri = TRUE,   upper_tri = \"average\",   diag = TRUE,   cluster_labels = TRUE,   cluster_lines = TRUE,   reverse_columns = FALSE,   options = NULL,   ... )  # S3 method for reordered_cluster_dissimilarity_matrix plot(   x,   lower_tri = TRUE,   upper_tri = \"average\",   diag = TRUE,   options = NULL,   ... )  # S3 method for reordered_cluster_dissimilarity_matrix print(x, ...)  ggdissplot(   x,   labels = NULL,   method = \"Spectral\",   control = NULL,   lower_tri = TRUE,   upper_tri = \"average\",   diag = TRUE,   cluster_labels = TRUE,   cluster_lines = TRUE,   reverse_columns = FALSE,   ... )"},{"path":"/reference/dissplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissimilarity Plot — dissplot","text":"x object class dist. labels NULL integer vector length rows/columns x indicating cluster membership object x consecutive integers starting one. labels used reorder matrix. method single character string indicating seriation method used reorder clusters (inter cluster seriation) well objects within cluster (intra cluster seriation).  different algorithms inter intra cluster seriation required, method can list two named elements (inter_cluster intra_cluster containing name respective seriation method. Use list_seriation_methods() kind = \"dist\" find available algorithms. Set method NA plot matrix (, cluster labels supplied, coarse seriation). intra cluster reordering special method \"silhouette width\" available (dissplot() ). Objects clusters ordered silhouette width (silhouette plots).  method given, default method seriate.dist() used. third list element (named aggregation) can added control inter cluster dissimilarities computed given dissimilarity matrix. choices \"avg\" (average pairwise dissimilarities; average-link), \"min\" (minimal pairwise dissimilarities; single-link), \"max\" (maximal pairwise dissimilarities; complete-link), \"Hausdorff\" (pairs point one cluster similar point cluster uses largest dissimilarity paired points). control list control options passed seriation algorithm.  case two different seriation algorithms, control can contain list two named elements (inter_cluster intra_cluster) containing list control options respective algorithm. upper_tri, lower_tri, diag logical indicating whether show upper triangle, lower triangle diagonal distance matrix. string \"average\" can also used display within cluster averages two triangles. cluster_labels logical indicating whether display cluster labels plot. cluster_lines logical indicating whether draw lines separate clusters. reverse_columns logical indicating clusters displayed diagonal north-west south-east (FALSE; default) north-east south-west (TRUE). options list options plotting matrix (dissplot ). plot logical indicating plot produced.  FALSE, returned object can plotted later using function plot takes second argument list plotting options (see options ). silhouettes logical indicating whether include silhouette plot (see Rousseeuw, 1987). threshold numeric. used, plot distances threshold displayed. Consider also using zlim purpose. col colors used image plot. key logical indicating whether place color key plot. zlim range values display (defaults range x). axes \"auto\" (default; enabled less 25 objects), \"y\" \"none\". main title plot. newpage logical indicating whether start plot new page (see grid.newpage(). pop logical indicating whether pop created viewports? (see package grid) gp, gp_lines, gp_labels objects class gpar containing graphical parameters plot lines labels (see gpar(). ... dissplot(): arguments added options. ggdissplot() arguments passed ggpimage().","code":""},{"path":"/reference/dissplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissimilarity Plot — dissplot","text":"dissplot() returns invisible object class cluster_proximity_matrix following elements: order NULL integer vector giving order used plot x. cluster_order NULL integer vector giving order clusters plotted. method vector character strings indicating seriation methods used plotting x. k NULL integer scalar giving number clusters generated. description data.frame containing information (label, size, average intra-cluster dissimilarity average silhouette) clusters displayed plot (top/left bottom/right). object can used plotting via plot(x, options = NULL, ...), x object options contains list plotting options (see ). ggdissplot() returns ggplot2 object representing plot. plot description object class reordered_cluster_dissimilarity_matrix.","code":""},{"path":"/reference/dissplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dissimilarity Plot — dissplot","text":"plot can also used visualize cluster quality (see Ling 1973). Objects belonging cluster displayed consecutive order. placement clusters within cluster order obtained seriation algorithm tries place large similarities/small dissimilarities close diagonal. Compact clusters visible dark squares (low dissimilarity) diagonal plot. Additionally, Silhouette plot (Rousseeuw 1987) added. visualization similar CLUSION (see Strehl Ghosh 2002), however, allows using arbitrary seriating algorithms. Note: Since pimage() uses grid, mixed base R primitive plotting functions.","code":""},{"path":"/reference/dissplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dissimilarity Plot — dissplot","text":"Hahsler, M. Hornik, K. (2011): Dissimilarity plots: visual exploration tool partitional clustering. Journal Computational Graphical Statistics, 10(2):335--354. doi:10.1198/jcgs.2010.09139 Ling, R.F. (1973): computer generated aid cluster analysis. Communications ACM, 16(6), 355--361. doi:10.1145/362248.362263 Rousseeuw, P.J. (1987): Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20(1), 53--65. doi:10.1016/0377-0427(87)90125-7 Strehl, . Ghosh, J. (2003): Relationship-based clustering visualization high-dimensional data mining. INFORMS Journal Computing, 15(2), 208--230. doi:10.1287/ijoc.15.2.208.14448","code":""},{"path":[]},{"path":"/reference/dissplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dissimilarity Plot — dissplot","text":"Michael Hahsler","code":""},{"path":"/reference/dissplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissimilarity Plot — dissplot","text":"","code":"data(\"iris\")  # shuffle rows x_iris <- iris[sample(seq(nrow(iris))), -5] d <- dist(x_iris)  # Plot original matrix dissplot(d, method = NA)   # Plot reordered matrix using the nearest insertion algorithm (from tsp) dissplot(d, method = \"TSP\", main = \"Seriation (TSP)\")   # Cluster iris with k-means and 3 clusters and reorder the dissimality matrix l <- kmeans(x_iris, centers = 3)$cluster dissplot(d, labels = l, main = \"k-means\")   # show only distances as lower triangle dissplot(d, labels = l, main = \"k-means\", lower_tri = TRUE, upper_tri = FALSE)   # Use a grid layout to place several plots on a page library(\"grid\") grid.newpage() pushViewport(viewport(layout=grid.layout(nrow = 2, ncol = 2),     gp = gpar(fontsize = 8))) pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))  # Visualize the clustering (using Spectral between clusters and MDS within) res <- dissplot(d, l, method = list(inter = \"Spectral\", intra = \"MDS\"),   main = \"K-Means + Seriation\", newpage = FALSE)  popViewport() pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))  # More visualization options. Note that we reuse the reordered object res! # color: use 10 shades red-blue, biased towards small distances plot(res, main = \"K-Means + Seriation (red-blue + biased)\",     col= bluered(10, bias = .5), newpage = FALSE)  popViewport() pushViewport(viewport(layout.pos.row = 2, layout.pos.col = 1))  # Threshold (using zlim) and cubic scale to highlight differences plot(res, main = \"K-Means + Seriation (cubic + threshold)\",     zlim = c(0, 2), col = grays(100, power = 3), newpage = FALSE)  popViewport() pushViewport(viewport(layout.pos.row = 2, layout.pos.col = 2))  # Use gray scale with logistic transformation plot(res, main = \"K-Means + Seriation (logistic scale)\",   col = gray(     plogis(seq(max(res$x_reordered), min(res$x_reordered), length.out = 100),       location = 2, scale = 1/2, log = FALSE)     ),   newpage = FALSE)  popViewport(2)   # The reordered_cluster_dissimilarity_matrix object res #> object of class 'reordered_cluster_dissimilarity_matrix' #> matrix dimensions: 150 x 150  #> dissimilarity measure: 'euclidean' #> number of clusters k: 3  #>  #> cluster description #>   position label size aggregated_dissimilarity avg_silhouette_width #> 1        1     1   38                1.0229060            0.4511051 #> 2        2     2   62                1.0338691            0.4173199 #> 3        3     3   50                0.6968169            0.7981405 #>  #> used seriation methods #> inter-cluster: 'Spectral' #> intra-cluster: 'MDS' #>  #> dissimilarity aggregation method: 'avg' names(res) #>  [1] \"x_reordered\"             \"labels\"                  #>  [3] \"seriation_methods\"       \"aggregation_method\"      #>  [5] \"k\"                       \"cluster_dissimilarities\" #>  [7] \"sil\"                     \"order\"                   #>  [9] \"cluster_order\"           \"diss_measure\"            #> [11] \"description\"              ## -------------------------------------------------------------------- ## ggplot-based dissplot if (require(\"ggplot2\")) {  library(\"ggplot2\")  # Plot original matrix ggdissplot(d, method = NA)  # Plot seriated matrix ggdissplot(d, method = \"TSP\") +   labs(title = \"Seriation (TSP)\")  # Cluster iris with k-means and 3 clusters l <- kmeans(x_iris, centers = 3)$cluster  ggdissplot(d, labels = l) +   labs(title = \"K-means + Seriation\")  # show only lower triangle ggdissplot(d, labels = l, lower_tri = TRUE, upper_tri = FALSE) +   labs(title = \"K-means + Seriation\")  # No lines or cluster labels and add a label for the color key (fill) ggdissplot(d, labels = l, cluster_lines = FALSE, cluster_labels = FALSE) +   labs(title = \"K-means + Seriation\", fill = \"Distances\\n(Euclidean)\")  # Diverging color palette with manual set midpoint and different seriation methods ggdissplot(d, l, method = list(inter = \"Spectral\", intra = \"MDS\")) +   labs(title = \"K-Means + Seriation\", subtitle = \"biased color scale\") +   scale_fill_gradient2(midpoint = median(d))  # Use manipulate scale using package scales library(\"scales\")  # Threshold (using limit and na.value) and cubic scale to highlight differences cubic_dist_trans <- trans_new(   name = \"cubic\",   # note that we have to do the inverse transformation for distances   trans = function(x) x^(1/3),   inverse = function(x) x^3 )  ggdissplot(d, l, method = list(inter = \"Spectral\", intra = \"MDS\")) +   labs(title = \"K-Means + Seriation\", subtitle = \"cubic + biased color scale\") +   scale_fill_gradient(low = \"black\", high = \"white\",     limit = c(0,2), na.value = \"white\",     trans = cubic_dist_trans)  # Use gray scale with logistic transformation logis_2_.5_dist_trans <- trans_new(   name = \"Logistic transform (location, scale)\",   # note that we have to do the inverse transformation for distances   trans = function(x) plogis(x, location = 2, scale = .5, log = FALSE),   inverse = function(x) qlogis(x, location = 2, scale = .5, log = FALSE), )  ggdissplot(d, l, method = list(inter = \"Spectral\", intra = \"MDS\")) +   labs(title = \"K-Means + Seriation\", subtitle = \"logistic color scale\") +   scale_fill_gradient(low = \"black\", high = \"white\",     trans = logis_2_.5_dist_trans,     breaks = c(0, 1, 2, 3, 4)) } #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/reference/get_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting Order Information from a Permutation Object — get_order","title":"Extracting Order Information from a Permutation Object — get_order","text":"Method get order information object class ser_permutation ser_permutation_vector. Order information can extracted integer permutation vector, vector containing object ranks permutation matrix.","code":""},{"path":"/reference/get_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting Order Information from a Permutation Object — get_order","text":"","code":"get_order(x, ...)  # S3 method for ser_permutation_vector get_order(x, ...)  # S3 method for ser_permutation get_order(x, dim = 1, ...)  # S3 method for hclust get_order(x, ...)  # S3 method for dendrogram get_order(x, ...)  # S3 method for integer get_order(x, ...)  get_rank(x, ...)  get_permutation_matrix(x, ...)"},{"path":"/reference/get_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting Order Information from a Permutation Object — get_order","text":"x object class ser_permutation ser_permutation_vector. ... arguments ignored get_order().  get_rank() get_permutation_matrix() additional arguments passed get_order() (e.g., dim). dim order information dimension returned?","code":""},{"path":"/reference/get_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting Order Information from a Permutation Object — get_order","text":"Returns integer permutation vector/permutation matrix.","code":""},{"path":"/reference/get_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting Order Information from a Permutation Object — get_order","text":"get_order() returns seriation integer vector containing order objects permutation. , index first, second, \\(..., n\\)-th object. permuation vectors can directly used reorder objects using subsetting \"[\".  Note: seriation usually use order-based permutation vectors. get_rank() returns seriation integer vector containing rank/position objects permutation. , position first, second, \\(..., n\\)-th object permutation.  Note: Use order() convert ranks back order. get_permutation_matrix() returns \\(n \\times n\\) permutation matrix.","code":""},{"path":[]},{"path":"/reference/get_order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting Order Information from a Permutation Object — get_order","text":"Michael Hahsler","code":""},{"path":"/reference/get_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting Order Information from a Permutation Object — get_order","text":"","code":"## permutation_vector o <- ser_permutation_vector(sample(10)) o #> object of class ‘ser_permutation_vector’, ‘integer’ #> contains a permutation vector of length 10 #> used seriation method: 'unknown'  get_order(o) #>  [1]  3  8  7  5  1  9  2  4 10  6 get_rank(o) #>  [1]  5  7  1  8  4 10  3  2  6  9 get_permutation_matrix(o) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    1    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    1    0     0 #>  [3,]    0    0    0    0    0    0    1    0    0     0 #>  [4,]    0    0    0    0    1    0    0    0    0     0 #>  [5,]    1    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     0 #>  [7,]    0    1    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    1    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     1 #> [10,]    0    0    0    0    0    1    0    0    0     0  ## permutation o2 <- ser_permutation(o, sample(5)) o2 #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 2-mode data #>  #>   vector length seriation method #> 1            10          unknown #> 2             5          unknown  get_order(o2, dim = 2) #> [1] 5 4 3 1 2 get_rank(o2, dim = 2) #> [1] 4 5 3 2 1 get_permutation_matrix(o2, dim = 2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0"},{"path":"/reference/hmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heat Map Reordered Using Seriation — hmap","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"Provides heatmaps reordered using several different seriation methods. includes dendrogram based reordering optimal leaf order matrix seriation-based heat maps.","code":""},{"path":"/reference/hmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"","code":"hmap(   x,   distfun = stats::dist,   method = \"OLO\",   control = NULL,   scale = c(\"none\", \"row\", \"column\"),   showDend = TRUE,   col = NULL,   row_labels = NULL,   col_labels = NULL,   ... )  gghmap(   x,   distfun = stats::dist,   method = \"OLO\",   control = NULL,   scale = c(\"none\", \"row\", \"column\"),   prop = FALSE,   ... )"},{"path":"/reference/hmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"x matrix dissimilarity matrix class dist. dissimilarity matrix used, distfun ignored. distfun function used compute distance (dissimilarity) rows columns. gghmap(), parameter passed control. method character strings indicating used seriation algorithm (see seriate.dist()). method results dendrogram stats::heatmap() used show dendrograms, otherwise reordered distance matrices shown instead. control list control options passed seriation algorithm specified method. scale character indicating values centered scaled either row direction column direction, none. Default none. showDend Show dendrograms margin? col list colors used. row_labels, col_labels logical indicating row column labels x displayed.  NULL labels displayed x contains appropriate dimname number labels 25 less. character vector appropriate length labels can also supplied. ... arguments passed stats::heatmap(). prop logical; change aspect ratio cells image equal width height.","code":""},{"path":"/reference/hmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"invisible list elements: rowInd, colInd index permutation vectors. reorder_method name method used reorder matrix. list may contain additional elements (dendrograms, colors, etc).","code":""},{"path":"/reference/hmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"dendrogram based heat maps, arguments passed stats::heatmap() stats. following arguments heatmap() used: margins, Rowv, Colv, hclustfun, reorderfun. seriation-based heat maps arguments include: gp object class gpar containing graphical parameters (see gpar() package grid). newpage logical indicating whether start plot new page prop logical indicating whether height width x plotted proportional dimensions. showdist Display seriated dissimilarity matrices? Values \"none\", \"\", \"rows\" \"columns\". key logical; show colorkey? key.lab Label plotted next color key. margins bottom right-hand-side margins calculated automatically can specifies vector two numbers (lines). zlim range values displayed. col, col_dist color palettes used.","code":""},{"path":[]},{"path":"/reference/hmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"Michael Hahsler","code":""},{"path":"/reference/hmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Heat Map Reordered Using Seriation — hmap","text":"","code":"data(\"Wood\")  # regular heatmap from package stats heatmap(Wood, main = \"Wood (standard heatmap)\")   # Default heatmap does Euclidean distance, hierarchical clustering with # average-link and optimal leaf ordering hmap(Wood, main = \"Wood (opt. leaf ordering)\")   # Heatmap shown without dendrograms (used pimage) hmap(Wood, main = \"Wood (opt. leaf ordering)\",  showDend = FALSE)   # Heatmap with correlation-based distance, green-red color (greenred is # predefined) and optimal leaf ordering and no row label dist_cor <- function(x) as.dist(1 - cor(t(x))) hmap(Wood, distfun = dist_cor, col = greenred(100), row_labels = FALSE,   main = \"Wood (reorded by corr. between obs.)\")   # Heatmap with order based on the angle in two-dimensional MDS space. hmap(Wood, method = \"MDS_angle\", col = greenred(100), row_labels = FALSE,   main = \"Wood (reorderd using ange in MDS space)\")   # Heatmap for distances d <- dist(Wood) hmap(d, method = \"OLO\", main = \"Wood (Euclidean distances)\")   # order-based with dissimilarity matrices hmap(Wood, method = \"MDS_angle\", showdist = \"both\",   col = greenred(100), col_dist = greens(100),   keylab = \"norm. Expression\", main = \"Wood (reporderd with distances)\")   # Manually seriate and plot as pimage. o <- seriate(Wood, method = \"heatmap\", control = list(dist_fun = dist, seriation_method = \"OLO\")) o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 2-mode data #>  #>   vector length seriation method #> 1           136              OLO #> 2             6              OLO  pimage(Wood, o, prop = FALSE)   # Note: method heatmap calculates reorderd hclust objects which can be used for many heatmap # implementations. heatmap(Wood, Rowv = as.dendrogram(o[[1]]), Colv = as.dendrogram(o[[2]]))   # ggplot 2 version does not support dendrograms in the margin (for now) if (require(\"ggplot2\")) {   library(\"ggplot2\")    gghmap(Wood) + labs(title = \"Wood\", subtitle = \"Optimal leaf ordering\")    # More parameters (see ? ggpimage): reverse column order and flip axes, make a proportional plot   gghmap(Wood, reverse_columns = TRUE) +     labs(title = \"Wood\", subtitle = \"Optimal leaf ordering\")    gghmap(Wood, flip_axes = TRUE) +     labs(title = \"Wood\", subtitle = \"Optimal leaf ordering\")    gghmap(Wood, flip_axes = TRUE, prop = TRUE) +     labs(title = \"Wood\", subtitle = \"Optimal leaf ordering\")    gghmap(Wood, distfun = dist_cor) +     labs(title = \"Wood\", subtitle = \"Reorded by correlation between observations\") +     scale_fill_gradient2(low = \"darkgreen\", high = \"red\")    gghmap(d, prop = TRUE) +     labs(title = \"Wood\", subtitle = \"Euclidean distances, reordered)\")    # Note: the ggplot2-based version cannot show distance matrices in the same plot.    # Manually seriate and plot as pimage.   o <- seriate(Wood, method = \"heatmap\", control = list(dist_fun = dist,     seriation_method = \"OLO\"))   o    ggpimage(Wood, o, prop = FALSE) } #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/reference/is.robinson.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"Provides functions create recognize (anti) Robinson pre-Robinson matrices. (anti) Robinson matrix strictly decreasing (increasing) values moving away main diagonal. pre-Robinson matrix matrix can transformed perfect Robinson matrix using simultaneous permutations rows columns.","code":""},{"path":"/reference/is.robinson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"","code":"is.robinson(x, anti = TRUE, pre = FALSE)  random.robinson(n, anti = TRUE, pre = FALSE, noise = 0)"},{"path":"/reference/is.robinson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"x symmetric, positive matrix dissimilarity matrix (dist object). anti logical; check anti Robinson structure? Note distances, anti Robinson structure appropriate. pre logical; recognize/create pre-Robinson matrices. n number objects. noise noise intensity 0 1. Zero means noise.  Noise zero results non-Robinson matrices.","code":""},{"path":"/reference/is.robinson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"single logical value.","code":""},{"path":"/reference/is.robinson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"Note default matrices anti Robinson matrices. done distance matrices (default R) typically anti Robinson matrices values increasing moving away diagonal. Robinson matrices recognized using fact zero anti Robinson events. pre-Robinson matrices use spectral seriation first since spectral seriation guaranteed perfectly reorder pre-Robinson matrices (see Laurent Seminaroti, 2015). Random pre-Robinson matrices generated reversing process unidimensional scaling. randomly (uniform distribution range \\([0,1]\\)) choose \\(x\\) coordinates n points straight line calculate pairwise distances. Robinson matrices, points sorted first according \\(x\\). noise, \\(y\\) coordinates added. coordinates chosen uniformly 0 noise, noise 0 1.","code":""},{"path":"/reference/is.robinson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"M. Laurent, M. Seminaroti (2015): quadratic assignment problem easy Robinsonian matrices Toeplitz structure, Operations Research Letters 43(1), 103--109.","code":""},{"path":"/reference/is.robinson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and Recognize Robinson and Pre-Robinson Matrices — is.robinson","text":"","code":"## create a perfect anti Robinson structure m <- random.robinson(10) pimage(m)   is.robinson(m) #> [1] TRUE  ## permute the structure to make it not Robinsonian. However, ## it is still pre-Robinson. o <- sample(10) m2 <- permute(m, ser_permutation(o,o)) pimage(m2)   is.robinson(m2) #> [1] FALSE is.robinson(m2, pre = TRUE) #> [1] TRUE  ## create a binary random Robinson matrix (not anti Robinson) m3 <- random.robinson(10, anti = FALSE) > .7 pimage(m3)  is.robinson(m3, anti = FALSE) #> [1] TRUE  ## create matrices with noise (as distance matrices) m4 <- as.dist(random.robinson(50, pre = FALSE, noise = .1)) pimage(m4)  criterion(m4, method = \"AR\") #> AR_events  #>       349   m5 <- as.dist(random.robinson(50, pre = FALSE, noise = .5)) pimage(m5)  criterion(m5, method = \"AR\") #> AR_events  #>      3892"},{"path":"/reference/palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Different Useful Color Palettes — palette","title":"Different Useful Color Palettes — palette","text":"Defines several color palettes pimage(), dissplot() hmap().","code":""},{"path":"/reference/palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Different Useful Color Palettes — palette","text":"","code":"bluered(n = 100, bias = 1, power = 1, ...)  greenred(n = 100, bias = 1, power = 1, ...)  reds(n = 100, bias = 1, power = 1, ...)  blues(n = 100, bias = 1, power = 1, ...)  greens(n = 100, bias = 1, power = 1, ...)  greys(n = 100, bias = 1, power = 1, ...)  grays(n = 100, bias = 1, power = 1, ...)"},{"path":"/reference/palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Different Useful Color Palettes — palette","text":"n number different colors produces. bias positive number. Higher values give widely spaced colors high end. power used control chroma luminance increased (1 = linear, 2 = quadratic, etc.) ... parameters passed sequential_hcl() diverging_hcl().","code":""},{"path":"/reference/palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Different Useful Color Palettes — palette","text":"vector n colors.","code":""},{"path":"/reference/palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Different Useful Color Palettes — palette","text":"color palettes created sequential_hcl() diverging_hcl() package colorspace. two sequential palettes : reds() grays() (greys()). two diverging palettes : bluered() greenred().","code":""},{"path":[]},{"path":"/reference/palette.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Different Useful Color Palettes — palette","text":"Michael Hahsler","code":""},{"path":"/reference/palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Different Useful Color Palettes — palette","text":"","code":"m <- outer(1:10,1:10) m #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    2    3    4    5    6    7    8    9    10 #>  [2,]    2    4    6    8   10   12   14   16   18    20 #>  [3,]    3    6    9   12   15   18   21   24   27    30 #>  [4,]    4    8   12   16   20   24   28   32   36    40 #>  [5,]    5   10   15   20   25   30   35   40   45    50 #>  [6,]    6   12   18   24   30   36   42   48   54    60 #>  [7,]    7   14   21   28   35   42   49   56   63    70 #>  [8,]    8   16   24   32   40   48   56   64   72    80 #>  [9,]    9   18   27   36   45   54   63   72   81    90 #> [10,]   10   20   30   40   50   60   70   80   90   100  pimage(m)  pimage(m, col = greys(100, power = 2))  pimage(m, col = greys(100, bias = 2))  pimage(m, col = bluered(100))  pimage(m, col = bluered(100, power = .5))  pimage(m, col = bluered(100, bias = 2))  pimage(m - 25, col = greenred(20, bias = 2))   ## choose your own color palettes library(colorspace) hcl_palettes(plot = TRUE)   ## blues (with 20 shades) pimage(m,   col = colorspace::sequential_hcl(20, \"Blues\", rev = TRUE))  ## blue to green (aka \"Cork\") pimage(m,   col = colorspace::diverging_hcl(100, \"Cork\"))"},{"path":"/reference/permutation_vector2matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","title":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","text":"Converts permutation vectors matrices.","code":""},{"path":"/reference/permutation_vector2matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","text":"","code":"permutation_vector2matrix(x)  permutation_matrix2vector(x)"},{"path":"/reference/permutation_vector2matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","text":"x permutation vector (object can converted permutation vector, e.g., integer vector hclust object) matrix representing permutation. Arguments checked.","code":""},{"path":"/reference/permutation_vector2matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","text":"permutation_vector2matrix(): returns permutation matrix. permutation_matrix2vector(): returns permutation integer vector.","code":""},{"path":[]},{"path":"/reference/permutation_vector2matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","text":"Michael Hahsler","code":""},{"path":"/reference/permutation_vector2matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion Between Permutation Vector and Permutation Matrix — permutation_vector2matrix","text":"","code":"## create a random permutation vector pv <- sample(1:5) pv #> [1] 2 1 3 4 5  ## convert into a permutation matrix pm <- permutation_vector2matrix(pv) pm #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1  ## convert back permutation_matrix2vector(pm) #> [1] 2 1 3 4 5"},{"path":"/reference/permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute the Order in Various Objects — permute","title":"Permute the Order in Various Objects — permute","text":"Provides generic function methods permuting order various objects including vectors, lists, dendrograms (also hclust objects), order observations dist object, rows columns matrix data.frame, dimensions array given suitable ser_permutation object.","code":""},{"path":"/reference/permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute the Order in Various Objects — permute","text":"","code":"permute(x, order, ...)  # S3 method for array permute(x, order, margin = NULL, ...)  # S3 method for matrix permute(x, order, margin = NULL, ...)  # S3 method for data.frame permute(x, order, margin = NULL, ...)  # S3 method for table permute(x, order, margin = NULL, ...)  # S3 method for numeric permute(x, order, ...)  # S3 method for character permute(x, order, ...)  # S3 method for list permute(x, order, ...)  # S3 method for dist permute(x, order, ...)  # S3 method for dendrogram permute(x, order, ...)  # S3 method for hclust permute(x, order, ...)"},{"path":"/reference/permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute the Order in Various Objects — permute","text":"x object (list, vector, dist object, matrix, array object provides dim standard subsetting \"[\"). order object class ser_permutation contains suitable permutation vectors x. Alternatively, character string name seriation method appropriate x can specified (see seriate()). perform seriation permute x. ... order name seriation method, additional arguments passed seriate(). margin specifies dimensions permuted vector dimension indices. NULL, order needs contain permutation dimensions. single margin specified, order can also contain single permutation vector. margin ignored.","code":""},{"path":"/reference/permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute the Order in Various Objects — permute","text":"permuted object class x.","code":""},{"path":"/reference/permute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permute the Order in Various Objects — permute","text":"permutation vectors ser_permutation suitable number permutation vectors matches number dimensions x length permutation vector length corresponding dimension x. 1-dimensional/1-mode data (list, vector, dist), order can also single permutation vector class ser_permutation_vector data can automatically coerced class (e.g. numeric vector). dendrogram hclust, subtrees rotated represent order best possible. order achieved perfectly user warned. behavior can changed extra parameter incompatible can take values \"warn\" (default), \"stop\" \"ignore\".","code":""},{"path":[]},{"path":"/reference/permute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permute the Order in Various Objects — permute","text":"Michael Hahsler","code":""},{"path":"/reference/permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permute the Order in Various Objects — permute","text":"","code":"# List data types for permute methods(\"permute\") #>  [1] permute.array*      permute.character*  permute.data.frame* #>  [4] permute.dendrogram* permute.dist*       permute.hclust*     #>  [7] permute.list*       permute.matrix*     permute.numeric*    #> [10] permute.table*      #> see '?methods' for accessing help and source code  # Permute matrix m <- matrix(rnorm(10), 5, 2, dimnames = list(1:5, LETTERS[1:2])) m #>            A           B #> 1  0.1842137  0.13948297 #> 2  0.2233062  0.19899836 #> 3 -0.4743069  2.07308451 #> 4 -0.1123650 -0.06594248 #> 5 -0.2301894 -1.30110932  # Permute rows and columns o <- ser_permutation(5:1, 2:1) o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 2-mode data #>  #>   vector length seriation method #> 1             5          unknown #> 2             2          unknown  permute(m, o) #>             B          A #> 5 -1.30110932 -0.2301894 #> 4 -0.06594248 -0.1123650 #> 3  2.07308451 -0.4743069 #> 2  0.19899836  0.2233062 #> 1  0.13948297  0.1842137  ## permute only columns permute(m, o, margin = 2) #>             B          A #> 1  0.13948297  0.1842137 #> 2  0.19899836  0.2233062 #> 3  2.07308451 -0.4743069 #> 4 -0.06594248 -0.1123650 #> 5 -1.30110932 -0.2301894  ## permute using PCA seriation permute(m, \"PCA\") #>            A           B #> 3 -0.4743069  2.07308451 #> 2  0.2233062  0.19899836 #> 1  0.1842137  0.13948297 #> 4 -0.1123650 -0.06594248 #> 5 -0.2301894 -1.30110932  ## permute only rows using PCA permute(m, o, margin = 1) #>            A           B #> 5 -0.2301894 -1.30110932 #> 4 -0.1123650 -0.06594248 #> 3 -0.4743069  2.07308451 #> 2  0.2233062  0.19899836 #> 1  0.1842137  0.13948297  # Permute data.frames df <- as.data.frame(m) permute(df, o) #>             B          A #> 5 -1.30110932 -0.2301894 #> 4 -0.06594248 -0.1123650 #> 3  2.07308451 -0.4743069 #> 2  0.19899836  0.2233062 #> 1  0.13948297  0.1842137  # Permute objects in a dist object d <- dist(m) d #>            1          2          3          4 #> 2 0.07120607                                  #> 3 2.04266110 1.99971573                       #> 4 0.36077493 0.42763163 2.16943274            #> 5 1.49901170 1.56715708 3.38301306 1.24077383  permute(d, c(3, 2, 1, 4, 5)) #>            3          2          1          4 #> 2 1.99971573                                  #> 1 2.04266110 0.07120607                       #> 4 2.16943274 0.42763163 0.36077493            #> 5 3.38301306 1.56715708 1.49901170 1.24077383  permute(d, \"Spectral\") #>            3          2          1          4 #> 2 1.99971573                                  #> 1 2.04266110 0.07120607                       #> 4 2.16943274 0.42763163 0.36077493            #> 5 3.38301306 1.56715708 1.49901170 1.24077383  # Permute a list l <- list(a = 1:5, b = letters[1:3], c = 0) l #> $a #> [1] 1 2 3 4 5 #>  #> $b #> [1] \"a\" \"b\" \"c\" #>  #> $c #> [1] 0 #>   permute(l, c(2, 3, 1)) #> $b #> [1] \"a\" \"b\" \"c\" #>  #> $c #> [1] 0 #>  #> $a #> [1] 1 2 3 4 5 #>   # Permute a dendrogram hc <- hclust(d) plot(hc)  plot(permute(hc, 5:1)) #> Warning: Dendrogram cannot be perfectly reordered! Using best approximation."},{"path":"/reference/pimage.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Image Plot — pimage","title":"Permutation Image Plot — pimage","text":"Provides methods matrix shading, .e., displaying color image matrix (including correlation matrices) dist objects given optional permutation.  plot arranges colored rectangles represent matrix value. Columns rows appear order matrix.  visualization also know asi heatmap.  Implementations based grid graphics engine based n ggplot2 provided.","code":""},{"path":"/reference/pimage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Image Plot — pimage","text":"","code":"pimage(   x,   order = NULL,   col = NULL,   main = \"\",   xlab = \"\",   ylab = \"\",   zlim = NULL,   key = TRUE,   keylab = \"\",   symkey = TRUE,   upper_tri = TRUE,   lower_tri = TRUE,   diag = TRUE,   row_labels = NULL,   col_labels = NULL,   prop = TRUE,   flip_axes = FALSE,   reverse_columns = FALSE,   ...,   newpage = TRUE,   pop = TRUE,   gp = NULL )  # S3 method for matrix pimage(   x,   order = NULL,   col = NULL,   main = \"\",   xlab = \"\",   ylab = \"\",   zlim = NULL,   key = TRUE,   keylab = \"\",   symkey = TRUE,   upper_tri = TRUE,   lower_tri = TRUE,   diag = TRUE,   row_labels = NULL,   col_labels = NULL,   prop = TRUE,   flip_axes = FALSE,   reverse_columns = FALSE,   ...,   newpage = TRUE,   pop = TRUE,   gp = NULL )  # S3 method for table pimage(x, order = NULL, ...)  # S3 method for dist pimage(   x,   order = NULL,   col = NULL,   main = \"\",   xlab = \"\",   ylab = \"\",   zlim = NULL,   key = TRUE,   keylab = \"\",   symkey = TRUE,   upper_tri = FALSE,   lower_tri = TRUE,   diag = FALSE,   row_labels = NULL,   col_labels = NULL,   prop = TRUE,   flip_axes = FALSE,   reverse_columns = FALSE,   ...,   newpage = TRUE,   pop = TRUE,   gp = NULL )  ggpimage(   x,   order = NULL,   zlim = NULL,   upper_tri = TRUE,   lower_tri = TRUE,   diag = TRUE,   row_labels = NULL,   col_labels = NULL,   prop = TRUE,   flip_axes = FALSE,   reverse_columns = FALSE )  # S3 method for matrix ggpimage(   x,   order = NULL,   zlim = NULL,   upper_tri = TRUE,   lower_tri = TRUE,   diag = TRUE,   row_labels = NULL,   col_labels = NULL,   prop = TRUE,   flip_axes = FALSE,   reverse_columns = FALSE )  # S3 method for dist ggpimage(   x,   order = NULL,   zlim = NULL,   upper_tri = FALSE,   lower_tri = TRUE,   diag = FALSE,   row_labels = NULL,   col_labels = NULL,   prop = TRUE,   flip_axes = FALSE,   reverse_columns = FALSE )"},{"path":"/reference/pimage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Image Plot — pimage","text":"x matrix object class dist. order object class ser_permutation name seriation method. NULL order x plotted. col list colors used. NULL, gray scale used (matrix larger values displayed darker dist smaller distances darker). matrices containing logical data, black white used. matrices containing negative values symmetric diverging color palette used. main plot title. xlab, ylab labels x y axes. zlim vector two elements giving range (min, max) representing values matrix. key logical; add color key? key available logical matrices. keylab string plotted next color key. symkey logical; x contains negative values, color palate symmetric (zero middle)> upper_tri, lower_tri, diag logical indicating whether show upper triangel, lower triangle diagonal (distance) matrix. row_labels, col_labels logical indicating row column labels x displayed.  NULL labels displayed x contains appropriate dimname number labels 25 less. character vector appropriate length labels can also supplied. prop logical; change aspect ratio cells image equal width height. flip_axes logical; exchange rows columns plotting. reverse_columns logical; revers order columns displayed. ... arguments ignored. newpage, pop, gp Start plot new page, pop viewports plotting, use supplied gpar object (see grid).","code":""},{"path":"/reference/pimage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Image Plot — pimage","text":"Nothing.","code":""},{"path":"/reference/pimage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation Image Plot — pimage","text":"Plots matrix original row column orientation. means, plot columns become x-coordinates rows y-coordinates (reverse order). x class dist converted full-storage representation plotting. Grid-based plot: viewports used plotting called: \"plot\", \"image\" \"colorkey\".  Note: Since pimage uses grid, mixed base R primitive plotting functions, appropriate functions grid-package. ggplot2-based plot: ggplot2 object returned. Colors, axis limits visual aspects can added using standard ggplot2 functions (labs, scale_fill_continuous, labs, etc.).","code":""},{"path":[]},{"path":"/reference/pimage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permutation Image Plot — pimage","text":"Christian Buchta Michael Hahsler","code":""},{"path":"/reference/pimage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Image Plot — pimage","text":"","code":"set.seed(1234)  ## Example: Logical Matrix x <- matrix(sample(c(FALSE, TRUE), 300, rep = TRUE), ncol = 10,   dimnames = list(1:30, LETTERS[1:10]))  # Matrix for logical values. TRUE values are dark and no color key is shown. There are too many # Row labels (>25) so they are suppressed. pimage(x)   # Show all labels and flip axes or reverse columns pimage(x, row_labels = TRUE, col_labels = TRUE, flip_axes = TRUE)  pimage(x, row_labels = TRUE, col_labels = TRUE, reverse_columns = TRUE)   # Reorder matrix, use custom colors, and add a title. pimage(x, order = seriate(x), row_labels = TRUE, col_labels = TRUE,   col = c(\"white\", \"red\"), main = \"Random Data (Reordered)\")   ## Example: Positive Matrix x <- matrix(runif(100), ncol = 10,   dimnames = list(LETTERS[1:10], paste0(\"X\", 1:10)))  pimage(x)   ## Example: Pos/Neg. Matrix x <- matrix(rnorm(100), ncol = 10,   dimnames = list(LETTERS[1:10], paste0(\"X\", 1:10)))  pimage(x)   ## Example: Distance Matrix # Show a reordered distance matrix (distances between rows). # Dark means low distance. The aspect ratio is automatically fixed to 1:1. # The upper triangle is suppressed triangle d <- dist(x) pimage(d,  order = seriate(d),   main = \"Random Data (Distances)\")   # Show only distances that are smaller than 4 using limits on z. pimage(d, order = seriate(d),   main = \"Random Data (Distances + Theshold)\", zlim = c(0, 4))   ## Example: Correlation Matrix # we calculate correlation between rows and seriate the matrix r <- cor(t(x)) r <- permute(r, seriate(r)) pimage(r, upper = FALSE, diag = FALSE, zlim = c(-1, 1), reverse_columns = TRUE,   main = \"Random Data (Correlation)\")   # Add to the plot using functions in package grid # Note: pop = FALSE allows us to manipulate viewports library(\"grid\") pimage(x, pop = FALSE)  # available viewports are: \"main\", \"colorkey\", \"plot\", \"image\" current.vpTree() #> viewport[ROOT]->(viewport[GRID.VP.304]->(viewport[GRID.VP.305]->(viewport[GRID.VP.306]->(viewport[colorkey]->(viewport[colorkey]), viewport[plot]->(viewport[image]))), viewport[main]))   # Highlight cell column 7 (G) / row 5 (from top)/col with a red arrow starting at 5/2 # Note: columns are x and rows are y. downViewport(name = \"image\") grid.lines(x = c(5, 7), y = c(2, 5), arrow = arrow(),   default.units = \"native\", gp = gpar(col = \"red\", lwd = 3))  # add a red box around rows 15 and 16 grid.rect(x = 0.5, y = 5.5, width = ncol(x), height = 2,   just = \"left\",   default.units = \"native\", gp = gpar(col = \"red\", lwd = 3, fill = NA))  ## remove the viewports popViewport(0)   ## put several pimages on a page (use grid viewports and newpage = FALSE) # set up grid layout library(grid) grid.newpage() top_vp <- viewport(layout = grid.layout(nrow = 1, ncol = 2,   widths = unit(c(.4, .6), unit = \"npc\"))) col1_vp <- viewport(layout.pos.row = 1, layout.pos.col = 1, name = \"col1_vp\") col2_vp <- viewport(layout.pos.row = 1, layout.pos.col = 2, name = \"col2_vp\") splot <- vpTree(top_vp, vpList(col1_vp, col2_vp)) pushViewport(splot)  seekViewport(\"col1_vp\") o <- seriate(x) pimage(x, o, labCol = FALSE, main = \"Random Data\",   newpage = FALSE)  seekViewport(\"col2_vp\") ## add the reordered dissimilarity matrix for rows d <- dist(x) pimage(d, o[[1]], labCol = FALSE, main = \"Random Data\",   newpage = FALSE)  popViewport(0)   ##------------------------------------------------------------- ## ggplot2 Examples if (require(\"ggplot2\")) {  library(\"ggplot2\")  ## Example: Logical Matrix x <- matrix(sample(c(FALSE, TRUE), 300, rep = TRUE), ncol = 10,   dimnames = list(1:30, LETTERS[1:10]))  # Matrix for logical values. TRUE values are dark. There are too many # Row labels (>25) so they are suppressed. ggpimage(x)  # Show all labels and flip axes or reverse columns ggpimage(x, flip_axes = TRUE, row_labels = TRUE, col_labels = TRUE) ggpimage(x, reverse_columns = TRUE, row_labels = TRUE, col_labels = TRUE)  # Add lines ggpimage(x) +   geom_hline(yintercept = seq(0, nrow(x)) + .5) +   geom_vline(xintercept = seq(0, ncol(x)) + .5)  # Reorder matrix, use custom colors, add a title, # and hide colorkey. ggpimage(x, order = seriate(x), row_labels = TRUE, col_labels = TRUE) +   scale_fill_manual(values = c(\"grey90\", \"red\")) +   theme(legend.position = \"none\") +   labs(title = \"Random Data\")  ## Example: Positive Matrix x <- matrix(runif(100), ncol = 10,   dimnames = list(LETTERS[1:10], paste0(\"X\", 1:10)))  ggpimage(x, order = seriate(x)) +   labs(title = \"Random Data\")  #' ## Example: Pos/Neg. Matrix x <- matrix(rnorm(100), ncol = 10,   dimnames = list(LETTERS[1:10], paste0(\"X\", 1:10)))  ggpimage(x, order = seriate(x)) +   labs(title = \"Random Data\")  ## Example: Distance Matrix # Show a reordered distance matrix (distances between rows). # Dark means low distance. The aspect ratio is automatically fixed to 1:1. # The upper triangle is suppressed triangle d <- dist(x) ggpimage(d, order = seriate(d)) +   labs(title = \"Random Data\", subtitle = \"Distances\")  # Show also upper triangle and diagonal ggpimage(d, order = seriate(d), upper_tri = TRUE, diag = TRUE) +   labs(title = \"Random Data\", subtitle = \"Distances\")  # Show only distances that are smaller than 4 using limits on fill. ggpimage(d,  order = seriate(d), zlim = c(0, 4)) +   labs(title = \"Random Data (Distances + Theshold)\")  ## Example: Correlation Matrix # we calculate correlation between rows and seriate the matrix r <- cor(t(x)) r <- permute(r, seriate(r)) ggpimage(r,  zlim = c(-1, 1), upper = FALSE, diag = FALSE, reverse_columns = TRUE) +   geom_text(aes(x = col, y = row, label = round(x, 2)), color = \"black\", size = 4) +   labs(title = \"Random Data\", subtitle = \"Correlation\")  ## Example: Custom themes and colors # Use ggplot2 themes with theme_set old_theme <- theme_set(theme_linedraw()) ggpimage(d, order = seriate(d)) +   labs(title = \"Random Data (Distances)\") theme_set(old_theme)  # Use custom color palettes: Gray scale, Colorbrewer (provided in ggplot2) and colorspace ggpimage(d, order = seriate(d), upper_tri = FALSE) +   scale_fill_gradient(low = \"black\", high = \"white\", na.value = \"white\")  ggpimage(d, order = seriate(d), upper_tri = FALSE) +   scale_fill_distiller(palette = \"Spectral\", direction = +1, na.value = \"white\")  ggpimage(d, order = seriate(d), upper_tri = FALSE) +   colorspace::scale_fill_continuous_sequential(\"Reds\", rev = FALSE, na.value = \"white\") } #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/reference/register_DendSer.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Seriation Methods from Package DendSer — register_DendSer","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"Register DendSer dendrogram seriation method ARc criterion (Earle Hurley, 2015) use seriate().","code":""},{"path":"/reference/register_DendSer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"","code":"register_DendSer()"},{"path":"/reference/register_DendSer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"Nothing.","code":""},{"path":"/reference/register_DendSer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"Registers method \"DendSer\" seriate(). DendSer fast heuristic reordering dendrograms developed Earle Hurley (2015) able use different criteria. control seriate method \"DendSer\" accepts following parameters: \"h\" \"method\" dendrogram method hierarchical clustering (see hclust). Default: complete-link. \"criterion\" seriation criterion optimize (see list_criterion_methods(\"dist\")). Default: \"BAR\" (Banded anti-Robinson 20\\ \"verbose\" logical; print progress information? \"DendSer_args\" additional arguments DendSer. convenience, following methods (different cost functions) also provided: \"DendSer_ARc\" (anti-robinson form), \"DendSer_BAR\" (banded anti-Robinson form), \"DendSer_LS\" (leaf seriation), \"DendSer_PL\" (path length). Note: Package DendSer needs installed.","code":""},{"path":"/reference/register_DendSer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"D. Earle, C. B. Hurley (2015): Advances dendrogram seriation application visualization. Journal Computational Graphical Statistics, 24(1), 1--25.","code":""},{"path":[]},{"path":"/reference/register_DendSer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"Michael Hahsler based code Catherine B. Hurley Denise Earle","code":""},{"path":"/reference/register_DendSer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Seriation Methods from Package DendSer — register_DendSer","text":"","code":"if (FALSE) { register_DendSer() get_seriation_method(\"dist\", \"DendSer\")  d <- dist(random.robinson(20, pre=TRUE))  ## use Banded AR form with default clustering (complete-link) o <- seriate(d, \"DendSer_BAR\") pimage(d, o)  ## use different hclust method (Ward) and AR as the cost function for ## dendrogram reordering o <- seriate(d, \"DendSer\", control = list(method = \"ward.D2\", criterion = \"AR\")) pimage(d, o) }"},{"path":"/reference/register_GA.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Genetic Algorithm Seriation Method — register_GA","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"Register GA-based seriation metaheuristic use seriate().","code":""},{"path":"/reference/register_GA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"","code":"register_GA()  gaperm_mixedMutation(ismProb = 0.8)"},{"path":"/reference/register_GA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"ismProb probability use GA::gaperm_ismMutation() (inversion) versus GA::gaperm_simMutation() (simple insertion).","code":""},{"path":"/reference/register_GA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"Nothing.","code":""},{"path":"/reference/register_GA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"Registers method \"GA\" seriate(). method can used optimize criterion package seriation. control seriate method \"GA\" accepts following parameters: \"criterion\" criterion optimize. Default: BAR \"suggestions\" suggestions warm start GA. NA means warm start. Default: TSP, QAP_LS Spectral. \"selection\" Selection operator. \"crossover\" Crossover operator. \"mutation\" Mutation operator. Default: mixture simple insertion (80% chance) simple inversion (20% chance) operators. \"pmutation\" probability permutations. Default: .5 \"pcrossover\" probability crossover. Default: .2 \"popsize\" population size. Default: 100 \"maxiter\" maximum number generations. Default: 1000 \"run\" stop run generations without improvement. Default: 50 \"parallel\" use multiple cores? Default: TRUE \"verbose\" logical; report progress? Default: TRUE GA uses default ordered cross-(OX) operator. mutation, GA uses mixture simple insertion simple inversion operators. mixed operator created using seriation::gaperm_mixedMutation(ismProb = .8), ismProb probability simple insertion mutation operator used. See package GA description available cross-mutation operators permutations. appropriate operator functions GA start gaperm_. warm start GA using \"suggestions\" given several heuristics. Set \"suggestions\" NA start purely random initial population. Note: Package GA needs installed.","code":""},{"path":"/reference/register_GA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"Luca Scrucca (2013): GA: Package Genetic Algorithms R. Journal Statistical Software, 53(4), 1--37. URL doi:10.18637/jss.v053.i04 .","code":""},{"path":[]},{"path":"/reference/register_GA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"Michael Hahsler","code":""},{"path":"/reference/register_GA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a Genetic Algorithm Seriation Method — register_GA","text":"","code":"if (FALSE) { register_GA() get_seriation_method(\"dist\", \"GA\")  d <- dist(random.robinson(50, pre=TRUE, noise=.1))  ## use default settings: Banded AR form o <- seriate(d, \"GA\") pimage(d, o)  ## optimize for linear sertiation criterion (LS) o <- seriate(d, \"GA\", control = list(criterion = \"LS\")) pimage(d, o)  ## no warm start o <- seriate(d, \"GA\", control = list(criterion = \"LS\", suggestions = NA)) pimage(d, o) }"},{"path":"/reference/register_optics.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Seriation Based on OPTICS — register_optics","title":"Register Seriation Based on OPTICS — register_optics","text":"Use ordering points identify clustering structure (OPTICS) seriate().","code":""},{"path":"/reference/register_optics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Seriation Based on OPTICS — register_optics","text":"","code":"register_optics()"},{"path":"/reference/register_optics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register Seriation Based on OPTICS — register_optics","text":"Nothing.","code":""},{"path":"/reference/register_optics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Seriation Based on OPTICS — register_optics","text":"Registers method \"optics\" seriate(). method applies OPTICS ordering algorithm create ordering. Note: Package dbscan needs installed.","code":""},{"path":"/reference/register_optics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Register Seriation Based on OPTICS — register_optics","text":"Mihael Ankerst, Markus M. Breunig, Hans-Peter Kriegel, Joerg Sander (1999). OPTICS: Ordering Points Identify Clustering Structure. ACM SIGMOD international conference Management data. ACM Press. pp. 49-60. doi:10.1145/304181.304187","code":""},{"path":[]},{"path":"/reference/register_optics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Seriation Based on OPTICS — register_optics","text":"","code":"if (FALSE) { register_optics() get_seriation_method(\"dist\", \"optics\")  d <- dist(random.robinson(50, pre=TRUE, noise=.1))  o <- seriate(d, method = \"optics\") pimage(d, o) }"},{"path":"/reference/register_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Seriation Based on 1D t-SNE — register_tsne","title":"Register Seriation Based on 1D t-SNE — register_tsne","text":"Use t-distributed stochastic neighbor embedding (t-SNE) seriate().","code":""},{"path":"/reference/register_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Seriation Based on 1D t-SNE — register_tsne","text":"","code":"register_tsne()"},{"path":"/reference/register_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register Seriation Based on 1D t-SNE — register_tsne","text":"Nothing.","code":""},{"path":"/reference/register_tsne.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Seriation Based on 1D t-SNE — register_tsne","text":"Registers method \"tsne\" seriate(). method applies 1D t-SNE data represented distance matrix extracts order 1D embedding. speed process, initial embedding created using multi-dimensional scaling (MDS) improved t-SNE. control parameter mds controls MDS used create initial embedding. See Rtsne::Rtsne() learn available control parameters. Note: Package Rtsne needs installed.","code":""},{"path":"/reference/register_tsne.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Register Seriation Based on 1D t-SNE — register_tsne","text":"van der Maaten, L.J.P. & Hinton, G.E., 2008. Visualizing High-Dimensional Data Using t-SNE. Journal Machine Learning Research, 9, pp.2579-2605.","code":""},{"path":[]},{"path":"/reference/register_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Seriation Based on 1D t-SNE — register_tsne","text":"","code":"if (FALSE) { register_tsne() get_seriation_method(\"dist\", \"tsne\")  d <- dist(random.robinson(50, pre=TRUE, noise=.1))  o <- seriate(d, method = \"tsne\") pimage(d, o) }"},{"path":"/reference/register_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Seriation Based on 1D UMAP — register_umap","title":"Register Seriation Based on 1D UMAP — register_umap","text":"Use uniform manifold approximation projection (UMAP) embed data number line create order seriate().","code":""},{"path":"/reference/register_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Seriation Based on 1D UMAP — register_umap","text":"","code":"register_umap()"},{"path":"/reference/register_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register Seriation Based on 1D UMAP — register_umap","text":"Nothing.","code":""},{"path":"/reference/register_umap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Seriation Based on 1D UMAP — register_umap","text":"Registers method \"umap\" seriate(). method applies 1D UMAP data represented distance matrix extracts order 1D embedding. Note: Package umap needs installed.","code":""},{"path":"/reference/register_umap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Register Seriation Based on 1D UMAP — register_umap","text":"McInnes, L, Healy, J, UMAP: Uniform Manifold Approximation Projection Dimension Reduction, ArXiv e-prints 1802.03426, 2018","code":""},{"path":[]},{"path":"/reference/register_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Seriation Based on 1D UMAP — register_umap","text":"","code":"if (FALSE) { register_umap() get_seriation_method(\"dist\", \"umap\")  d <- dist(random.robinson(50, pre=TRUE, noise=.1))  o <- seriate(d, method = \"umap\") pimage(d, o) }"},{"path":"/reference/registry_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Registry for Criterion Methods — registry_criterion","title":"Registry for Criterion Methods — registry_criterion","text":"registry manage methods used criterion() calculate criterion value given data permutation.","code":""},{"path":"/reference/registry_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Registry for Criterion Methods — registry_criterion","text":"","code":"registry_criterion  list_criterion_methods(kind)  get_criterion_method(kind, name)  set_criterion_method(kind, name, fun, description = NULL, merit = NA, ...)  # S3 method for criterion_method print(x, ...)"},{"path":"/reference/registry_criterion.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Registry for Criterion Methods — registry_criterion","text":"object class criterion_registry (inherits registry) length 20.","code":""},{"path":"/reference/registry_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Registry for Criterion Methods — registry_criterion","text":"kind data type method works . example, \"dist\", \"matrix\" \"array\". name name method used refer method function criterion(). fun function containing method's code. description description method. example, long name. merit boolean indicating criterion measure merit (TRUE) loss (FALSE) measure. ... information stored method registry. x object class \"criterion_method\" printed.","code":""},{"path":"/reference/registry_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Registry for Criterion Methods — registry_criterion","text":"list_criterion_method() results vector character strings names methods used criterion(). get_criterion_method() returns given method form object class \"criterion_method\".","code":""},{"path":"/reference/registry_criterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Registry for Criterion Methods — registry_criterion","text":"methods convenience methods registry named registry_criterion. list_criterion_method() lists available methods given data type (kind). result vector character strings short names methods. kind missing, list methods returned. get_criterion_method() returns information (including implementing function) given method form object class \"criterion_method\". set_criterion_method() new criterion methods can added user. implementing function (fun) needs formal arguments x, order, ..., x data object, order object class ser_permutation_vector ... can contain additional information method passed criterion(). implementation return criterion value scalar.","code":""},{"path":[]},{"path":"/reference/registry_criterion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Registry for Criterion Methods — registry_criterion","text":"Michael Hahsler","code":""},{"path":"/reference/registry_criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Registry for Criterion Methods — registry_criterion","text":"","code":"## the registry registry_criterion #> An object of class 'registry' with 20 entries.  # List all criterion calculation methods by type list_criterion_methods() #> $dist #>  [1] \"2SUM\"              \"AR_deviations\"     \"AR_events\"         #>  [4] \"BAR\"               \"Cor_R\"             \"Gradient_raw\"      #>  [7] \"Gradient_weighted\" \"Inertia\"           \"LS\"                #> [10] \"Lazy_path_length\"  \"Least_squares\"     \"ME\"                #> [13] \"Moore_stress\"      \"Neumann_stress\"    \"Path_length\"       #> [16] \"RGAR\"              #>  #> $matrix #> [1] \"Cor_R\"          \"ME\"             \"Moore_stress\"   \"Neumann_stress\" #>   # List methods for matrix list_criterion_methods(\"matrix\") #> [1] \"Cor_R\"          \"ME\"             \"Moore_stress\"   \"Neumann_stress\"  get_criterion_method(\"dist\", \"AR_d\") #> name:        AR_deviations #> kind:        dist #> description: Anti-Robinson deviations #> merit:       FALSE  # Define a new method (sum of the diagonal elements)  ## 1. implement a function to calculate the measure criterion_method_matrix_foo <- function(x, order, ...) { if(!is.null(order)) x <- permute(x,order)     sum(diag(x)) }  ## 2. Register new method set_criterion_method(\"matrix\", \"DiagSum\", criterion_method_matrix_foo,     description = \"Calculated the sum of all diagonal entries\", merit = FALSE)  list_criterion_methods(\"matrix\") #> [1] \"Cor_R\"          \"DiagSum\"        \"ME\"             \"Moore_stress\"   #> [5] \"Neumann_stress\" get_criterion_method(\"matrix\", \"DiagSum\") #> name:        DiagSum #> kind:        matrix #> description: Calculated the sum of all diagonal entries #> merit:       FALSE  ## 3. use all criterion methods (including the new one) criterion(matrix(1:9, ncol = 3)) #>          Cor_R        DiagSum             ME   Moore_stress Neumann_stress  #>    -0.09301487    15.00000000   340.00000000   280.00000000   120.00000000"},{"path":"/reference/registry_seriate.html","id":null,"dir":"Reference","previous_headings":"","what":"Registry for Seriation Methods — registry_seriate","title":"Registry for Seriation Methods — registry_seriate","text":"registry manage methods used seriate().","code":""},{"path":"/reference/registry_seriate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Registry for Seriation Methods — registry_seriate","text":"","code":"registry_seriate  list_seriation_methods(kind)  get_seriation_method(kind, name)  set_seriation_method(   kind,   name,   definition,   description = NULL,   control = list(),   ... )  # S3 method for seriation_method print(x, ...)"},{"path":"/reference/registry_seriate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Registry for Seriation Methods — registry_seriate","text":"object class seriation_registry (inherits registry) length 48.","code":""},{"path":"/reference/registry_seriate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Registry for Seriation Methods — registry_seriate","text":"kind data type method works . example, \"dist\", \"matrix\" \"array\". missing, methods type shown. name name method used refer method seriate(). definition function containing method's code. description description method. example, long name. control list control arguments default values. ... information stored method registry. x object class  \"seriation_method\" printed.","code":""},{"path":"/reference/registry_seriate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Registry for Seriation Methods — registry_seriate","text":"list_seriation_method() result vector character strings names methods. names used methods seriate(). get_seriation_method() returns given method form object class \"seriation_method\".","code":""},{"path":"/reference/registry_seriate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Registry for Seriation Methods — registry_seriate","text":"functions convenience function registry registry_seriate. list_seriation_method() lists available methods given data type (kind) (e.g., \"dist\", \"matrix\"). result vector character strings method names can used function seriate(). kind missing, list methods returned. get_seriation_method() returns detailed information given method form object class \"seriation_method\". information includes description, parameters implementing function. set_seriation_method() new seriation methods can added user. implementing function (definition) needs formal arguments x, control, x data object control contains list additional information method passed seriate().  implementation return list objects can coerced ser_permutation_vector objects (e.g., integer vectors). elements list corresponding order dimensions x.","code":""},{"path":[]},{"path":"/reference/registry_seriate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Registry for Seriation Methods — registry_seriate","text":"Michael Hahsler","code":""},{"path":"/reference/registry_seriate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Registry for Seriation Methods — registry_seriate","text":"","code":"# Registry registry_seriate #> An object of class 'registry' with 48 entries.  # List all seriation methods by type list_seriation_methods() #> $array #> [1] \"Identity\" \"Random\"   \"Reverse\"  #>  #> $dist #>  [1] \"ARSA\"          \"BBURCG\"        \"BBWRCG\"        \"GW\"            #>  [5] \"GW_average\"    \"GW_complete\"   \"GW_single\"     \"GW_ward\"       #>  [9] \"HC\"            \"HC_average\"    \"HC_complete\"   \"HC_single\"     #> [13] \"HC_ward\"       \"Identity\"      \"MDS\"           \"MDS_angle\"     #> [17] \"MDS_metric\"    \"MDS_nonmetric\" \"OLO\"           \"OLO_average\"   #> [21] \"OLO_complete\"  \"OLO_single\"    \"OLO_ward\"      \"QAP_2SUM\"      #> [25] \"QAP_BAR\"       \"QAP_Inertia\"   \"QAP_LS\"        \"R2E\"           #> [29] \"Random\"        \"SA\"            \"SPIN_NH\"       \"SPIN_STS\"      #> [33] \"Spectral\"      \"Spectral_norm\" \"TSP\"           \"VAT\"           #>  #> $matrix #> [1] \"BEA\"       \"BEA_TSP\"   \"CA\"        \"Heatmap\"   \"Identity\"  \"PCA\"       #> [7] \"PCA_angle\" \"Random\"    \"Reverse\"   #>   # List methods for matrix seriation list_seriation_methods(\"matrix\") #> [1] \"BEA\"       \"BEA_TSP\"   \"CA\"        \"Heatmap\"   \"Identity\"  \"PCA\"       #> [7] \"PCA_angle\" \"Random\"    \"Reverse\"    get_seriation_method(name = \"BEA\") #> name:        BEA #> kind:        matrix #> description: Bond Energy Algorithm (BEA; McCormick 1972) to maximize the Measure of Effectiveness of a non-negative matrix. #> control (default values): #>   istart jstart rep #> 1      0      0   1  # Example for defining a new seriation method (reverse identity function for matrix)  # 1. Create the seriation method seriation_method_reverse <- function(x, control) {    # return a list of order vectors, one for each dimension    list(seq(nrow(x), 1), seq(ncol(x), 1)) }  # 2. Register new method set_seriation_method(\"matrix\", \"Reverse\", seriation_method_reverse,     description = \"Reverse identity order\", control = list())  list_seriation_methods(\"matrix\") #> [1] \"BEA\"       \"BEA_TSP\"   \"CA\"        \"Heatmap\"   \"Identity\"  \"PCA\"       #> [7] \"PCA_angle\" \"Random\"    \"Reverse\"   get_seriation_method(\"matrix\", \"reverse\") #> name:        Reverse #> kind:        matrix #> description: Reverse identity order #> control: no parameters registered.  # 3. Use the new seriation methods seriate(matrix(1:12, ncol=3), \"reverse\") #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 2-mode data #>  #>   vector length seriation method #> 1             4          Reverse #> 2             3          Reverse"},{"path":"/reference/reorder.hclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"Reorder method dendrograms optimal leaf ordering.","code":""},{"path":"/reference/reorder.hclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"","code":"# S3 method for hclust reorder(x, dist, method = \"OLO\", ...)"},{"path":"/reference/reorder.hclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"x object class hclust. dist object class dist dissimilarities objects x. method character string name used measure. Available : \"OLO\" (optimal leaf ordering; Bar-Joseph et al., 2001) implemented package \"GW\" (Gruvaeus Wainer, 1972) package gclus. ... arguments currently ignored.","code":""},{"path":"/reference/reorder.hclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"reordered hclust object.","code":""},{"path":"/reference/reorder.hclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"Minimizes distance neighboring objects (leaf nodes) dendrogram flipping order subtrees. algorithm Gruvaeus Wainer implemented package gclus (Hurley 2004).","code":""},{"path":"/reference/reorder.hclust.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"Bar-Joseph, Z., E. D. Demaine, D. K. Gifford, T. Jaakkola. (2001): Fast Optimal Leaf Ordering Hierarchical Clustering. Bioinformatics, 17(1), 22--29. Gruvaeus, G. Wainer, H. (1972): Two Additions Hierarchical Cluster Analysis, British Journal Mathematical Statistical Psychology, 25, 200--206. Hurley, Catherine B. (2004): Clustering Visualizations Multidimensional Data. Journal Computational Graphical Statistics, 13(4), 788--806.","code":""},{"path":[]},{"path":"/reference/reorder.hclust.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"Michael Hahsler","code":""},{"path":"/reference/reorder.hclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder Dendrograms using Optimal Leaf Ordering — reorder.hclust","text":"","code":"## cluster European cities by distance data(\"eurodist\") d <- as.dist(eurodist) hc <- hclust(eurodist)  ## plot original dendrogram and the reordered dendrograms plot(hc)  plot(reorder(hc, d, method = \"GW\")) #> Registered S3 method overwritten by 'gclus': #>   method         from      #>   reorder.hclust seriation  plot(reorder(hc, d, method = \"OLO\"))"},{"path":"/reference/ser_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"Calculates dissimilarities/correlations seriation orders list type ser_permutation_vector.","code":""},{"path":"/reference/ser_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"","code":"ser_dist(x, y = NULL, method = \"spearman\", reverse = TRUE, ...)  ser_cor(x, y = NULL, method = \"spearman\", reverse = TRUE, test = FALSE)  ser_align(x, method = \"spearman\")"},{"path":"/reference/ser_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"x set seriation orders list elements can coerced ser_permutation_vector objects. y NULL single seriation order can specified. case x single seriation order list. method character string name used measure. Available measures : \"kendall\", \"spearman\", \"manhattan\", \"euclidean\", \"hamming\", \"ppc\" (positional proximity coefficient), \"aprd\" (absolute pairwise rank differences). reverse logical indicating orders also checked reverse order best value (highest correlation, lowest distance) reported. affect ranking-based measures precedence invariant measures (e.g., ppc, aprd). ... arguments passed method. test logical indicating correlation test performed.","code":""},{"path":"/reference/ser_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"ser_dist() returns object class dist. ser_align() returns new list elements class ser_permutation.","code":""},{"path":"/reference/ser_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"ser_cor() calculates correlation two sequences (orders). Note seriation order reverse identical purely artifact due method creates order. major difference rankings. ranking-based correlation measures (Spearman Kendall) absolute value correlation returned reverse = TRUE (effect returning correlation reversed order). test = TRUE appropriate test association performed matrix p-values returned attribute \"p-value\". Note correction multiple testing performed. ser_dist(), correlation coefficients (Kendall's tau Spearman's rho) converted dissimilarity taking one minus correlation value. Note Manhattan distance ranks linear order equivalent Spearman's footrule metric (Diaconis 1988). reverse = TRUE returns pairwise minima using also reversed orders. positional proximity coefficient (ppc) precedence invariant measure based product squared positional distances two permutations defined (see Goulermas et al 2016): $$d_{ppc}(R, S) = 1/h \\sum_{j=2}^n \\sum_{=1}^{j-1} (\\pi_R()-\\pi_R(j))^2 * (\\pi_S()-\\pi_S(j))^2,$$ \\(R\\) \\(S\\) two seriation orders, \\(pi_R\\) \\(pi_S\\) associated permutation vectors \\(h\\) normalization factor. associated generalized correlation coefficient defined \\(1-d_{ppc}\\). precedence invariant measure reverse ignored. absolute pairwise rank difference (aprd) also precedence invariant defined distance measure: $$d_{aprd}(R, S) = \\sum_{j=2}^n \\sum_{=1}^{j-1} | |\\pi_R()-\\pi_R(j)| - |\\pi_S()-\\pi_S(j)| |^p,$$ \\(p\\) power can passed parameter p default set 2. precedence invariant measure reverse ignored. ser_align() tries normalize direction list seriations ranking-based methods can used. add permutation also reversed order set use modified version Prim's algorithm finding minimum spanning tree (MST) choose original seriation order reverse used. use orders first added MST. Every time order added, reverse removed possible remaining orders.","code":""},{"path":"/reference/ser_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"P. Diaconis (1988): Group Representations Probability Statistics. Institute Mathematical Statistics, Hayward, CA. J.Y. Goulermas, . Kostopoulos, T. Mu (2016): New Measure Analyzing Fusing Sequences Objects. IEEE Transactions Pattern Analysis Machine Intelligence 38(5):833-48. doi:10.1109/TPAMI.2015.2470671","code":""},{"path":[]},{"path":"/reference/ser_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"Michael Hahsler","code":""},{"path":"/reference/ser_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissimilarities and Correlations Between Seriation Orders — ser_dist","text":"","code":"set.seed(1234) ## seriate dist of 50 flowers from the iris data set data(\"iris\") x <- as.matrix(iris[-5]) x <- x[sample(1:nrow(x), 50), ] rownames(x) <- 1:50 d <- dist(x)  ## Create a list of different seriations methods <- c(\"HC_single\", \"HC_complete\", \"OLO\", \"GW\", \"R2E\", \"VAT\",   \"TSP\", \"Spectral\", \"SPIN\", \"MDS\", \"Identity\", \"Random\")  os <- sapply(methods, function(m) {   cat(\"Doing\", m, \"... \")   tm <- system.time(o <- seriate(d, method = m))   cat(\"took\", tm[3],\"s.\\n\")   o }) #> Doing HC_single ... took 0 s. #> Doing HC_complete ... took 0.001 s. #> Doing OLO ... took 0.001 s. #> Doing GW ... took 0.001 s. #> Doing R2E ... took 0.002 s. #> Doing VAT ... took 0.001 s. #> Doing TSP ... took 0.002 s. #> Doing Spectral ... took 0.001 s. #> Doing SPIN ... took 0.02 s. #> Doing MDS ... took 0.001 s. #> Doing Identity ... took 0 s. #> Doing Random ... took 0 s.  ## Compare the methods using distances. Default is based on ## Spearman's rank correlation coefficient where reverse orders are ## also considered. ds <- ser_dist(os) hmap(ds, margin = c(7,7))   ## Compare using correlation between orders. Reversed orders have ## negative correlation! cs <- ser_cor(os, reverse = FALSE) hmap(cs, margin = c(7,7))   ## Compare orders by allowing orders to be reversed. ## Now all but random and identity are highly positive correlated cs2 <- ser_cor(os, reverse = TRUE) hmap(cs2, margin=c(7,7))   ## A better approach is to align the direction of the orders first ## and then calculate correlation. os_aligned <- ser_align(os) cs3 <- ser_cor(os_aligned, reverse = FALSE) hmap(cs3, margin = c(7,7))   ## Compare the orders using clustering. We use Spearman's foot rule ## (Manhattan distance of ranks). In order to use rank-based method, ## we align the direction of the orders. os_aligned <- ser_align(os) ds <- ser_dist(os_aligned, method = \"manhattan\") plot(hclust(ds))"},{"path":"/reference/ser_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","title":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","text":"class ser_permutation collection permutation vectors (see class ser_permutation_vector), one dimension (mode) data permuted.","code":""},{"path":"/reference/ser_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","text":"","code":"ser_permutation(x, ...)  # S3 method for ser_permutation print(x, ...)  # S3 method for ser_permutation summary(object, ...)  # S3 method for ser_permutation c(..., recursive = FALSE)  # S3 method for ser_permutation [(object, i, ...)"},{"path":"/reference/ser_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","text":"x, object object class ser_permutation_vector object can converted object class ser_permutation (e.g. integer vector). ... vectors dimensions. recursive ignored. index dimension(s) extract.","code":""},{"path":"/reference/ser_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","text":"object class ser_permutation.","code":""},{"path":[]},{"path":"/reference/ser_permutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","text":"Michael Hahsler","code":""},{"path":"/reference/ser_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ser_permutation -- A Collection of Permutation Vectors for Seriation — ser_permutation","text":"","code":"o <- ser_permutation(1:5, 10:1) o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 2-mode data #>  #>   vector length seriation method #> 1             5          unknown #> 2            10          unknown  ## length (number of dimensions) length(o) #> [1] 2  ## get permutation vector for 2nd dimension get_order(o, 2) #>  [1] 10  9  8  7  6  5  4  3  2  1  ## reverse dimensions o[2:1] #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 2-mode data #>  #>   vector length seriation method #> 1            10          unknown #> 2             5          unknown  ## combine o <- c(o, ser_permutation(1:15)) o #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 3-mode data #>  #>   vector length seriation method #> 1             5          unknown #> 2            10          unknown #> 3            15          unknown  ## get an individual permutation o[[2]] #> object of class ‘ser_permutation_vector’, ‘integer’ #> contains a permutation vector of length 10 #> used seriation method: 'unknown'  ## reverse the order of a permutation o[[2]] <- rev(o[[2]]) get_order(o,2) #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"/reference/ser_permutation_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"class ser_permutation_vector represents single permutation vector.","code":""},{"path":"/reference/ser_permutation_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"","code":"ser_permutation_vector(x, method = NULL)  # S3 method for ser_permutation_vector c(..., recursive = FALSE)  # S3 method for ser_permutation_vector rev(x)  get_method(x, printable = FALSE)  # S3 method for ser_permutation_vector length(x)  # S3 method for ser_permutation_vector print(x, ...)  # S3 method for ser_permutation_vector summary(object, ...)"},{"path":"/reference/ser_permutation_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"x, object object contains permutation vector (currently integer vector object class hclust). value NA creates identity permutation. method string representing method used obtain permutation vector. ... arguments. recursive ignored printable logical; prints \"unknown\" instead NULL non-existing methods.","code":""},{"path":"/reference/ser_permutation_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"object class ser_permutation_vector.","code":""},{"path":"/reference/ser_permutation_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"permutation vector maps set \\(n\\) objects \\(\\{O_1, O_2, ..., O_n\\}\\) onto . seriation represent permutation \\(\\pi\\) vector lists objects permuted order. example, permutation vector \\(\\langle3, 1, 2\\rangle\\) indicates first position object index 3 object index 1 finally object index 2. permutation vector can extracted permutation vector object via get_order(). permutation vector can directly used subset list original objects \"[\" apply permutation. Note: alternative way specify permutation via list ranks objects permutation (see get_rank()). ser_permutation_vector objects usually packed ser_permutation object collection \\(k\\) permutation vectors \\(k\\)-mode data. constructor ser_permutation_vector() checks permutation vector valid (.e. integers occur exactly ).","code":""},{"path":[]},{"path":"/reference/ser_permutation_vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"Michael Hahsler","code":""},{"path":"/reference/ser_permutation_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ser_permutation_vector -- A Single Permutation Vector for Seriation — ser_permutation_vector","text":"","code":"p <- ser_permutation_vector(sample(10), \"random\") p #> object of class ‘ser_permutation_vector’, ‘integer’ #> contains a permutation vector of length 10 #> used seriation method: 'random'  ## some methods length(p) #> [1] 10 get_method(p) #> [1] \"random\" get_order(p) #>  [1]  6  4 10  9  3  2  1  7  8  5 get_rank(p) #>  [1]  7  6  5  2 10  1  8  9  4  3 get_permutation_matrix(p) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    1    0    0    0     0 #>  [2,]    0    0    0    1    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     1 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    1    0    0    0    0    0    0     0 #>  [6,]    0    1    0    0    0    0    0    0    0     0 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    1    0    0     0 #>  [9,]    0    0    0    0    0    0    0    1    0     0 #> [10,]    0    0    0    0    1    0    0    0    0     0  r <- rev(p) r #> object of class ‘ser_permutation_vector’, ‘integer’ #> contains a permutation vector of length 10 #> used seriation method: 'random' get_order(r) #>  [1]  5  8  7  1  2  3  9 10  4  6  ## create a identity permutation vector (with unknown length) ip <- ser_permutation_vector(NA) ip #> object of class ‘ser_permutation_vector’, ‘integer’ #> contains a permutation vector of length 0 #> used seriation method: 'identity permutation'"},{"path":"/reference/seriate.html","id":null,"dir":"Reference","previous_headings":"","what":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"Tries find linear order objects using data form dissimilarity matrix (two-way one mode data), data matrix (two-way two-mode data) data array (k-way k-mode data). order can used reorder dissimilarity matrix/data matrix using permute().","code":""},{"path":"/reference/seriate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"","code":"seriate(x, ...)  # S3 method for array seriate(x, method = \"PCA\", control = NULL, margin = seq(length(dim(x))), ...)  # S3 method for data.frame seriate(x, method = \"Heatmap\", control = NULL, margin = c(1, 2), ...)  # S3 method for dist seriate(x, method = \"Spectral\", control = NULL, ...)  # S3 method for matrix seriate(x, method = \"PCA\", control = NULL, margin = c(1, 2), ...)  # S3 method for table seriate(x, method = \"CA\", control = NULL, margin = c(1, 2), ...)"},{"path":"/reference/seriate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"x data. ... arguments added control list. method character string name seriation method (default: varies data type). control list control options passed seriation algorithm. margin vector giving margin indices (dimensions) seriated. example, matrix, 1 indicates rows, 2 indicates columns, c(1,2) indicates rows columns. Unseriated margins return identity seriation order.","code":""},{"path":"/reference/seriate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"Returns object class ser_permutation.","code":""},{"path":"/reference/seriate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"Seriation methods managed via registry. See list_seriation_methods() help. following, discuss built-methods registered automatically package seriation. Many seriation methods (heuristically) optimize (minimize maximize) objective function. value function given seriation can calculated using criterion(). manual page, include measure optimized method using bold font. measure mentioned, measure directly optimize measure. definition measures can found criterion() manual page. Seriation methods distance matrices (dist) One-mode two-way data provided dist object (symmetric matrix). Similarities transformed dissimilarities. Currently, following methods implemented (detailed description experimental comparison see Hahsler (2017): \"ARSA\" Anti-Robinson seriation simulated annealing minimize linear seriation criterion (simulated annealing initialization used Brusco et al 2008). \"BBURCG\" Anti-Robinson seriation branch--bound minimize unweighted gradient measure (Brusco Stahl 2005). feasible relatively small number objects. \"BBWRCG\" Anti-Robinson seriation branch--bound minimize weighted gradient measure (Brusco Stahl 2005). feasible relatively small number objects. \"TSP\" Traveling salesperson problem solver minimize Hamiltonian path length. solvers TSP used (see TSP::solve_TSP()). solver method can passed via control argument, e.g. control = list(method = \"two_opt\"). Default est 10 runs arbitrary insertion heuristic 2-opt improvement. Since tour returned TSP solver connected circle looking path representing linear order, need find best cutting point.  Climer Zhang (2006) suggest add dummy city equal distance city generating tour. place dummy city optimal tour minimal length best cutting point (lies distant cities). \"R2E\" Rank-two ellipse seriation (Chen 2002). method starts generating sequence correlation matrices \\(R^1, R^2, \\ldots\\). \\(R^1\\) correlation matrix original distance matrix \\(D\\) (supplied function x), $$R^{n+1} = \\phi R^n,$$ \\(\\phi\\) calculates correlation matrix. rank matrix \\(R^n\\) falls increasing \\(n\\). first \\(R^n\\) sequence rank 2 found. Projecting points matrix first two eigenvectors, points fall ellipse. order points ellipse resulting order. ellipse can cut two interception points (top bottom) vertical axis ellipse. implementation top cutting point used. \"MDS\", \"MDS_metric\", \"MDS_nonmetric\", \"MDS_angle\" Multidimensional scaling (MDS). Use multidimensional scaling techniques find linear order minimizing stress. Note MDS algorithms used single dimension tend end local optima unidimensional scaling (see Maier De Leeuw, 2015) appropriate. However, generally, ordering along first component MDS provides good results. control parameters: method: One \"cmdscale\", \"isoMDS\" \"sammon\". \"cmdscale\" performs metric MDS using stats::cmdscale(). Non-metric MDS methods \"isoMDS\" \"sammon\" preformed using MASS::isoMDS(). default, metric MDS used (stats::cmdscale()). case general dissimilarities, non-metric MDS can used. method can specified element method (\"cmdscale\", \"isoMDS\" \"sammon\") control. convenience, seriation methods \"MDS_metric\" performs cmdscale() \"MDS_nonmetric\" performs MASS::isoMDS(). \"MDS_angle\" projects data first two components found MDS orders angle space. order split larges gap adjacent angles. similar method used ordering correlation matrices Friendly (2002). \"HC\", \"HC_single\", \"HC_complete\", \"HC_average\", \"HC_ward\" Hierarchical clustering. Using order leaf nodes dendrogram obtained hierarchical clustering can used simple seriation technique. method applies hierarchical clustering (hclust()) x. clustering method can given using \"method\" element control list. omitted, default \"average\" used. convenience methods provided shortcuts. \"GW\" Hierarchical clustering (Gruvaeus Wainer, 1972). methods start dendrogram created hclust(). \"method\" element control list clustering method (default \"average\") can specified. Alternatively, hclust object can supplied using element named \"hclust\". dendrogram (binary tree) \\(2^{n-1}\\) internal nodes (subtrees) number leaf orderings. , internal node left right subtree (leaves) can swapped, , terms dendrogram, flipped. leaf-node reordering minimize Hamiltonian path length (restricted). Method \"GW\" uses algorithm developed Gruvaeus Wainer (1972) implemented gclus::reorder.hclust() (Hurley 2004).  clusters ordered level objects edge cluster adjacent object outside cluster nearest. method produces unique order. convenience \"GW_single\", \"GW_average\", \"GW_complete\", \"GW_ward\" provided. \"OLO\" Optimal leaf ordering (Bar-Joseph et al., 2001). Also starts dendrogram produces optimal leaf ordering respect minimizing sum distances along (Hamiltonian) path connecting leaves given order. time complexity algorithm \\(O(n^3)\\). Note non-finite distance values allowed. convenience \"OLO_single\", \"OLO_average\", \"OLO_complete\", \"OLO_ward\" provided. \"VAT\" Visual Assessment (Clustering) Tendency (Bezdek Hathaway (2002)). Creates order based Prim's algorithm finding minimum spanning tree (MST) weighted connected graph representing distance matrix. order given order nodes (objects) added MST. \"SA\" Simulated Annealing diverse criterion measures. Implement simulated annealing similar ARSA method, however, works criterion measure defined seriation. default algorithm optimizes raw gradient measure warm started result spectral seriation (2-Sum problem) since Hahsler (2017) shows 2-Sum solutions similar solutions gradient measure. Several popular local neighborhood functions provided new can defined (see LS). Note R implementation repeatedly calling criterion, therefore relatively slow. \"Spectral\", \"Spectral_norm\" Spectral seriation (Ding 2004). Spectral seriation uses relaxation minimize 2-Sum Problem (Barnard, Pothen, Simon, 1993). uses order Fiedler vector similarity matrix's (normalized) Laplacian. Spectral seriation gives good trade-seriation quality, speed scalability (see Hahsler, 2017). \"SPIN_STS\", \"SPIN_NH\" Sorting Points Neighborhoods (SPIN) (Tsafrir 2005). Given weight matrix \\(W\\), algorithms try minimize energy permutation (matrix \\(P\\)) given $$F(P) =   tr(PDP^TW),$$ \\(tr\\) denotes matrix trace. \"SPIN_STS\" implements Side--Side algorithm tries push large distance values. default weight matrix suggested paper \\(W=XX^T\\) \\(X_i=-(n+1)/2\\) used. run algorithm step (25) iteration restart algorithm nstart (10) random initial permutations (default values parentheses). Via control parameters step, nstart, X verbose. \"SPIN_NH\" implements neighborhood algorithm (concentrate low distance values around diagonal) Gaussian weight matrix \\(W_{ij} = exp(-(-j)^2/n\\sigma)\\), \\(n\\) size dissimilarity matrix \\(\\sigma\\) variance around diagonal control influence global (large \\(\\sigma\\)) local (small \\(\\sigma\\)) structure. use heuristic suggested paper linear assignment problem. terminate indicated algorithm, run iterations since heuristic guarantee energy strictly decreasing. also implement heuristic \"annealing\" scheme \\(\\sigma\\) successively reduced. parameters control sigma can single value decreasing sequence (default: 20 1 10 steps) step defines many update steps performed value alpha. Via W_function custom function create \\(W\\) function signature function(n, sigma, verbose) can specified. parameter verbose can used display progress information. \"QAP_LS\", \"QAP_2SUM\", \"QAP_BAR\", \"QAP_Inertia\" Quadratic assignment problem formulations seriation using simulated annealing solver. methods minimize Linear Seriation Problem (LS) formulation (Hubert Schultz 1976), 2-Sum Problem formulation (Barnard, Pothen, Simon 1993), banded anti-Robinson form (BAR) inertia criterion. control parameters passed qap::qap(). important parameter rep return best result given number repetitions random restarts. Default 1, bigger numbers result better stable results. \"GA\" Use genetic algorithm optimize various criteria. GA code first registered. detailed description can found manual page register_GA(). \"DendSer\" Use heuristic dendrogram seriation optimize various criteria. DendSer code first registered. detailed description can found manual page register_DendSer(). \"Identity\" Produces identity permutation. \"Random\"  Produces random permutation. Seriation methods matrices (matrix data.frame) Two-mode two-way data general matrices. methods also require matrix positive. Data frames just different representation matrix seriation methods matrix can also used data frames. default method data frames heatmap seriation calculates distances rows columns applies seriation using hierarchical clustering optimal leaf ordering (OLO). Currently following methods implemented matrix: \"BEA\" Bond Energy Algorithm (BEA; McCormick 1972). algorithm tries maximize Measure Effectiveness. non-negative matrix. Due definition measure, tasks ordering rows columns separable can solved independently. row arbitrarily placed; rows positioned one one. completed, columns treated similarly. overall procedure amounts two approximate traveling salesperson problems (TSP), one rows one columns. -called `best insertion strategy' used: rows (columns) inserted current permuted list rows (columns). Several consecutive runs algorithm might improve energy. Note Arabie Hubert (1990) question use non-binary data objective find seriation one-dimensional orderings rows columns. BEA code used package implemented Fionn Murtagh. control parameter: \"rep\": number runs can specified. results best run returned. \"BEA_TSP\" Use TSP optimize Measure Effectiveness (Lenstra 1974). control parameter: \"method\": TSP solver method (see TSP::solve_TSP()). \"CA\" Correspondence analysis table/matrix frequencies. function designed help simplify mosaic plot displays matrix frequencies.  calculates correspondence analysis matrix order rows columns according scores correspondence analysis dimension. control parameters: \"dim\": CA dimension used reordering. \"ca_param\": List parameters call ca::ca(). \"Heatmap\" Heatmap seriation Calculates distances rows columns applies seriation using hierarchical clustering optimal leaf ordering (method \"OLO\" distance matrices). \"PCA\" Order first principal component. Uses projection data first principal component determine order. Note distance matrix calculated x Euclidean distance, methods minimizes least square criterion. \"PCA_angle\" Order using first two principal components. Projects data first two principal components orders angle space. order split larges gap adjacent angles. similar method used ordering correlation matrices Friendly (2002). \"Identity\" Produces identity permutation. \"Random\" Produces random permutation. general arrays built-methods currently available.","code":""},{"path":"/reference/seriate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"Arabie, P. L.J. Hubert (1990): bond energy algorithm revisited, IEEE Transactions Systems, Man, Cybernetics, 20(1), 268--274. doi:10.1109/21.47829 Bar-Joseph, Z., E. D. Demaine, D. K. Gifford, T. Jaakkola. (2001): Fast Optimal Leaf Ordering Hierarchical Clustering. Bioinformatics, 17(1), 22--29. doi:10.1093/bioinformatics/17.suppl_1.S22 Barnard, S. T., . Pothen, H. D. Simon (1993): Spectral Algorithm Envelope Reduction Sparse Matrices. Proceedings 1993 ACM/IEEE Conference Supercomputing, 493--502. Supercomputing '93. New York, NY, USA: ACM. https://ieeexplore.ieee.org/document/1263497 Bezdek, J.C. Hathaway, R.J. (2002): VAT: tool visual assessment (cluster) tendency. Proceedings 2002 International Joint Conference Neural Networks (IJCNN '02), Volume: 3, 2225--2230. doi:10.1109/IJCNN.2002.1007487 Brusco, M., Koehn, H.F., Stahl, S. (2008): Heuristic Implementation Dynamic Programming Matrix Permutation Problems Combinatorial Data Analysis. Psychometrika, 73(3), 503--522. doi:10.1007/s11336-007-9049-5 Brusco, M., Stahl, S. (2005): Branch--Bound Applications Combinatorial Data Analysis. New York: Springer. doi:10.1007/0-387-28810-4 Chen, C. H. (2002): Generalized Association Plots: Information Visualization via Iteratively Generated Correlation Matrices. Statistica Sinica, 12(1), 7--29. Ding, C. Xiaofeng (2004): Linearized cluster assignment via spectral ordering. Proceedings Twenty-first International Conference Machine learning (ICML '04). doi:10.1145/1015330.1015407 Climer, S. Xiongnu Zhang (2006): Rearrangement Clustering: Pitfalls, Remedies, Applications, Journal Machine Learning Research, 7(Jun), 919--943. Friendly, M. (2002): Corrgrams: Exploratory Displays Correlation Matrices. American Statistician, 56(4), 316--324. doi:10.1198/000313002533 Gruvaeus, G. Wainer, H. (1972): Two Additions Hierarchical Cluster Analysis, British Journal Mathematical Statistical Psychology, 25, 200--206. doi:10.1111/j.2044-8317.1972.tb00491.x Hahsler, M. (2017): experimental comparison seriation methods one-mode two-way data. European Journal Operational Research, 257, 133--143. doi:10.1016/j.ejor.2016.08.066 Hubert, Lawrence, James Schultz (1976): Quadratic Assignment General Data Analysis Strategy. British Journal Mathematical Statistical Psychology 29(2). Blackwell Publishing Ltd. 190--241. doi:10.1111/j.2044-8317.1976.tb00714.x Hurley, Catherine B. (2004): Clustering Visualizations Multidimensional Data. Journal Computational Graphical Statistics, 13(4), 788--806. doi:10.1198/106186004X12425 Lenstra, J.K (1974): Clustering Data Array Traveling-Salesman Problem, Operations Research, 22(2) 413--414. doi:10.1287/opre.22.2.413 Mair P., De Leeuw J. (2015). Unidimensional scaling. Wiley StatsRef: Statistics Reference Online, Wiley, New York. doi:10.1002/9781118445112.stat06462.pub2 McCormick, W.T., P.J. Schweitzer T.W. White (1972): Problem decomposition data reorganization clustering technique, Operations Research, 20(5), 993--1009. doi:10.1287/opre.20.5.993 Tsafrir, D., Tsafrir, ., Ein-Dor, L., Zuk, O., Notterman, D.. Domany, E. (2005): Sorting points neighborhoods (SPIN): data analysis visualization ordering distance matrices, Bioinformatics, 21(10) 2301--8. doi:10.1093/bioinformatics/bti329","code":""},{"path":[]},{"path":"/reference/seriate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"Michael Hahsler","code":""},{"path":"/reference/seriate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seriate Dissimilarity Matrices, Matrices or Arrays — seriate","text":"","code":"# Show available seriation methods (for dist and matrix) list_seriation_methods() #> $array #> [1] \"Identity\" \"Random\"   \"Reverse\"  #>  #> $dist #>  [1] \"ARSA\"          \"BBURCG\"        \"BBWRCG\"        \"GW\"            #>  [5] \"GW_average\"    \"GW_complete\"   \"GW_single\"     \"GW_ward\"       #>  [9] \"HC\"            \"HC_average\"    \"HC_complete\"   \"HC_single\"     #> [13] \"HC_ward\"       \"Identity\"      \"MDS\"           \"MDS_angle\"     #> [17] \"MDS_metric\"    \"MDS_nonmetric\" \"OLO\"           \"OLO_average\"   #> [21] \"OLO_complete\"  \"OLO_single\"    \"OLO_ward\"      \"QAP_2SUM\"      #> [25] \"QAP_BAR\"       \"QAP_Inertia\"   \"QAP_LS\"        \"R2E\"           #> [29] \"Random\"        \"SA\"            \"SPIN_NH\"       \"SPIN_STS\"      #> [33] \"Spectral\"      \"Spectral_norm\" \"TSP\"           \"VAT\"           #>  #> $matrix #> [1] \"BEA\"       \"BEA_TSP\"   \"CA\"        \"Heatmap\"   \"Identity\"  \"PCA\"       #> [7] \"PCA_angle\" \"Random\"    \"Reverse\"   #>   ### Seriate as distance matrix (for the iris dataset) data(\"iris\") x <- as.matrix(iris[-5]) x <- x[sample(1:nrow(x)), ] d <- dist(x)  order <- seriate(d) order #> object of class ‘ser_permutation’, ‘list’ #> contains permutation vectors for 1-mode data #>  #>   vector length seriation method #> 1           150         Spectral  pimage(d, main = \"Distances (Random Order)\")  pimage(d, order, main = \"Distances (Reordered)\")   # Compare seriation quality rbind(         random = criterion(d),         reordered = criterion(d, order)      ) #>               2SUM AR_deviations AR_events       BAR      Cor_R Gradient_raw #> random    30468963    966223.582    558784 165955.60 0.01263096       -15483 #> reordered 17821593      9887.392     54924  56609.97 0.37195391       992058 #>           Gradient_weighted   Inertia      LS Lazy_path_length Least_squares #> random            -32636.37 211686682 5690074        29646.303      78893988 #> reordered        1771427.16 356910343 4487365         6705.889      76488569 #>                 ME Moore_stress Neumann_stress Path_length       RGAR #> random    5879.489    11833.839      5985.8554   389.49727 0.50678759 #> reordered 7253.697     1111.651       538.7757    91.28657 0.04981317  # Reorder the distance matrix d_reordered <-  permute(d, order) pimage(d_reordered, main = \"Distances (Reordered)\")    ### Seriate a matrix data(\"iris\") x <- as.matrix(iris[-5])  # To make the variables comparable, we scale the data x <- scale(x, center = FALSE)  # The iris flowers are ordered by species in the data set pimage(x, main = \"original data\", prop = FALSE)  criterion(x) #>          Cor_R        DiagSum             ME   Moore_stress Neumann_stress  #>      0.2137794      2.2822249   1005.9980469    357.1093200    133.6494969   # Apply some methods order <- seriate(x, method = \"BEA_TSP\") pimage(x, order, main = \"TSP to optimize ME\", prop = FALSE)  criterion(x, order) #>          Cor_R        DiagSum             ME   Moore_stress Neumann_stress  #>    -0.01660821     2.02965361  1026.81396484   167.28938180    59.12345189   order <- seriate(x, method = \"PCA\") pimage(x, order, main = \"First principal component\", prop = FALSE)  criterion(x, order) #>          Cor_R        DiagSum             ME   Moore_stress Neumann_stress  #>      0.2651909      2.1515976   1021.4874878    175.8500473     67.4722984   order <- seriate(x, method = \"heatmap\") pimage(x, order, main = \"Heatmap seriation\", prop = FALSE)  criterion(x, order) #>          Cor_R        DiagSum             ME   Moore_stress Neumann_stress  #>     -0.2615153      2.8061108   1023.0682983    165.7717428     58.9144525   # reorder the matrix x_reordered <- permute(x, order)  # create a heatmap seriation manually by calculating # distances between rows and between columns order <- c(     seriate(dist(x), method = \"OLO\"),     seriate(dist(t(x)), method = \"OLO\") ) pimage(x, order, main = \"Heatmap seriation\", prop = FALSE)  criterion(x, order) #>          Cor_R        DiagSum             ME   Moore_stress Neumann_stress  #>     -0.2615153      2.8061108   1023.0682983    165.7717428     58.9144525   ### Seriate a correlation matrix corr <- cor(x) pimage(corr, upper_tri = FALSE, main = \"Correlation matrix\")   # we need to define a distance (we used d = sqrt(2(1 - r))) and # then reorder the matrix (rows and columns). d <- as.dist(sqrt(2 * (1 - corr))) o <- seriate(d) corr_reordered <- permute(corr, order = c(o, o)) pimage(corr_reordered, upper_tri = FALSE, main = \"Correlation matrix (reordered)\")"},{"path":"/reference/seriation-package.html","id":null,"dir":"Reference","previous_headings":"","what":"seriation: Infrastructure for Ordering Objects Using Seriation — seriation-package","title":"seriation: Infrastructure for Ordering Objects Using Seriation — seriation-package","text":"Infrastructure ordering objects implementation several seriation/sequencing/ordination techniques reorder matrices, dissimilarity matrices, dendrograms. Also provides (optimally) reordered heatmaps, color images clustering visualizations like dissimilarity plots, visual assessment cluster tendency plots (VAT iVAT).","code":""},{"path":"/reference/seriation-package.html","id":"key-functions","dir":"Reference","previous_headings":"","what":"Key functions","title":"seriation: Infrastructure for Ordering Objects Using Seriation — seriation-package","text":"Seriation: seriate(), criterion(), get_order(), permute() Visualization: pimage(), bertinplot(), hmap(), dissplot(), VAT()","code":""},{"path":"/reference/seriation-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"seriation: Infrastructure for Ordering Objects Using Seriation — seriation-package","text":"Michael Hahsler, Kurt Hornik, Christian Buchta. Getting things order: introduction R package seriation. Journal Statistical Software, 25(3):1--34, March 2008. doi:10.18637/jss.v025.i03","code":""},{"path":"/reference/seriation-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"seriation: Infrastructure for Ordering Objects Using Seriation — seriation-package","text":"Michael Hahsler","code":""},{"path":"/reference/uniscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Unidimensional Scaling from Seriation Results — uniscale","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"Performs (approximate) unidimensional scaling first performing seriation obtain permutation using permutation calculate configuration.","code":""},{"path":"/reference/uniscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"","code":"uniscale(d, order = NULL, method = \"QAP_LS\", rep = 10, ...)  orderplot(x, main, pch = 19, ...)"},{"path":"/reference/uniscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"d dissimilarity matrix. order precomputed permutation (configuration) order.  NULL, seriation performed using method specified method. method seriation method used o NULL. rep Number repetitions seriation heuristic. ... additional arguments passed seriation method. x scaling returned uniscale(). main main plot label pch print character","code":""},{"path":"/reference/uniscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"vector fitted configuration.","code":""},{"path":"/reference/uniscale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"Uses method describes Maier De Leeuw (2015) calculate minimum stress configuration either given configuration/permutation/order permutation computed via seriation method. code similar uniscale() smacof, scales larger datasets since check permutations.","code":""},{"path":"/reference/uniscale.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"Mair P., De Leeuw J. (2015). Unidimensional scaling. Wiley StatsRef: Statistics Reference Online, Wiley, New York. doi:10.1002/9781118445112.stat06462.pub2","code":""},{"path":"/reference/uniscale.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"Michael Hahsler code Patrick Mair (smacof).","code":""},{"path":"/reference/uniscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unidimensional Scaling from Seriation Results — uniscale","text":"","code":"data(SupremeCourt)  d <- as.dist(SupremeCourt)  sc <- uniscale(d) sc #>     Breyer   Ginsburg    Kennedy    OConnor  Rehnquist     Scalia     Souter  #> -0.5502170 -0.6888976  0.3206014  0.1179750  0.5502213  0.8861084 -0.4412820  #>    Stevens     Thomas  #> -1.0148850  0.8203757   orderplot(sc)"},{"path":[]},{"path":"/news/index.html","id":"seriation-140","dir":"Changelog","previous_headings":"","what":"seriation 1.4.0","title":"seriation 1.4.0","text":"CRAN release: 2022-10-21","code":""},{"path":"/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"seriation 1.4.0","text":"seriate arrays (including matrices) now returns complete ser_permutation dimensions even margins specified. specified margins, identity permutations returned. added support tables added new seriation method CA (correspondence analysis) contributed Michael Friendly. permute now accepts one margins. permute now accepts seriation method instead order.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.4.0","text":"seriate.dist now throws correct error upon encountering NAs (david-barnett)","code":""},{"path":"/news/index.html","id":"seriation-136-07142022","dir":"Changelog","previous_headings":"","what":"seriation 1.3.6 (07/14/2022)","title":"seriation 1.3.6 (07/14/2022)","text":"CRAN release: 2022-07-16","code":""},{"path":"/news/index.html","id":"new-features-1-3-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"seriation 1.3.6 (07/14/2022)","text":"ggpimage now zlim parameter.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-3-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.3.6 (07/14/2022)","text":"added register functions back export (reported thomasp85). fixed viewports pimage colorkey. fixed ggplot diverging color palette direction.","code":""},{"path":"/news/index.html","id":"seriation-134-3162022","dir":"Changelog","previous_headings":"","what":"seriation 1.3.4 (3/16/2022)","title":"seriation 1.3.4 (3/16/2022)","text":"CRAN release: 2022-03-17","code":""},{"path":"/news/index.html","id":"bug-fixes-1-3-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.3.4 (3/16/2022)","text":"fixed length calculation optimal.c","code":""},{"path":"/news/index.html","id":"seriation-133-332022","dir":"Changelog","previous_headings":"","what":"seriation 1.3.3 (3/3/2022)","title":"seriation 1.3.3 (3/3/2022)","text":"CRAN release: 2022-03-07","code":""},{"path":"/news/index.html","id":"new-features-1-3-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"seriation 1.3.3 (3/3/2022)","text":"pimage dissplot gained parameter diag. pimage dist default show diagonal now. C code now supports long vectors dist objects.","code":""},{"path":"/news/index.html","id":"user-visible-changes-1-3-3","dir":"Changelog","previous_headings":"","what":"User-Visible Changes","title":"seriation 1.3.3 (3/3/2022)","text":"removed deprecated show functions registries.","code":""},{"path":"/news/index.html","id":"internal-changes-1-3-3","dir":"Changelog","previous_headings":"","what":"Internal Changes","title":"seriation 1.3.3 (3/3/2022)","text":"now use roxygen documentation. added check long vectors FORTRAN handle.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-1-3-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"seriation 1.3-2 (2/10/2022)","text":"improved argument checking ser_permutation_vector(). ggplot uses now standard ggplot2 color palettes.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-1-3-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"seriation 1.3-1 (10/15/2021)","text":"added seriation based 1D t-SNE embedding. added seriation based 1D UMAP embedding. added seriation based OPTICS.","code":""},{"path":"/news/index.html","id":"user-visible-changes-1-3-1","dir":"Changelog","previous_headings":"","what":"User-Visible Changes","title":"seriation 1.3-1 (10/15/2021)","text":"VAT plots now default upper_tri = TRUE show whole matrix.","code":""},{"path":[]},{"path":"/news/index.html","id":"user-visible-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"User-Visible Changes","title":"seriation 1.3-0 (06/29/2021)","text":"plotting functions now common interface. changed many parameters. hmap now uses heatmap package stats. dissplot shows now averages top triangles. improved layout (less white space) grid-based plots. list_seriation_methods list_criterion_methods without kind return now list. show_seriation_methods show_criterion_methods deprecated criterion returns now NA warning non-positive matrices (used stop error). dependency dendextend now suggested (used testing). get_order now returns also labels. hclust-based seriations now defaults linkage complete instead average.","code":""},{"path":"/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"seriation 1.3-0 (06/29/2021)","text":"Major refactoring plotting functions provide consistent interface. added ggplot2-based plots, ggimage, gghmap, ggVAT, ggiVAT, ggbertinplot, ggdissplot. colors now consistent bias power. seriate matrix now method “Heatmap”. seriate now accepts data.frames used method “heatmap” default. added seriation method “Reverse” reverse identity order. permute matrix-like objects gained parameter margin. permute data.frame works now identical permute matrix.","code":""},{"path":"/news/index.html","id":"seriation-12-9-09292020","dir":"Changelog","previous_headings":"","what":"seriation 1.2-9 (09/29/2020)","title":"seriation 1.2-9 (09/29/2020)","text":"CRAN release: 2020-10-01 removed dependency methods. added DOIs.","code":""},{"path":"/news/index.html","id":"seriation-12-8-08272019","dir":"Changelog","previous_headings":"","what":"seriation 1.2-8 (08/27/2019)","title":"seriation 1.2-8 (08/27/2019)","text":"CRAN release: 2019-08-27","code":""},{"path":"/news/index.html","id":"new-features-1-2-8","dir":"Changelog","previous_headings":"","what":"New features","title":"seriation 1.2-8 (08/27/2019)","text":"get_seriation_method now better information also show available control parameters.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-8","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.2-8 (08/27/2019)","text":"GA: Updated parameter names change package ga.","code":""},{"path":"/news/index.html","id":"seriation-12-7-06072019","dir":"Changelog","previous_headings":"","what":"seriation 1.2-7 (06/07/2019)","title":"seriation 1.2-7 (06/07/2019)","text":"CRAN release: 2019-06-08","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.2-7 (06/07/2019)","text":"Added missing void * init.c","code":""},{"path":"/news/index.html","id":"seriation-12-6-06032019","dir":"Changelog","previous_headings":"","what":"seriation 1.2-6 (06/03/2019)","title":"seriation 1.2-6 (06/03/2019)","text":"CRAN release: 2019-06-04","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.2-6 (06/03/2019)","text":"Converted print routines FORTRAN code dblepr, intpr, etc. seriate.matrix also prints now method name control verbose = TRUE.","code":""},{"path":"/news/index.html","id":"seriation-12-5-05302019","dir":"Changelog","previous_headings":"","what":"seriation 1.2-5 (05/30/2019)","title":"seriation 1.2-5 (05/30/2019)","text":"CRAN release: 2019-05-30","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.2-5 (05/30/2019)","text":"Fixed compilation warnings FORTRAN code.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-1-2-4","dir":"Changelog","previous_headings":"","what":"New features","title":"seriation 1.2-4 (05/29/2019)","text":"bertinplot: panel colors can now specified highlight shading.function.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.2-4 (05/29/2019)","text":"bertinplot: fix white squares frame = TRUE (Dirk Seidensticker). seriation method “BEA” now slight code improvement (suggested RichardKav)","code":""},{"path":"/news/index.html","id":"seriation-12-3-02052018","dir":"Changelog","previous_headings":"","what":"seriation 1.2-3 (02/05/2018)","title":"seriation 1.2-3 (02/05/2018)","text":"CRAN release: 2018-02-05","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"seriation 1.2-3 (02/05/2018)","text":"seriation method “BEA” now longer masked “BEA_TSP”. Also FORTRAN calls now work. SPIN: making matrix doubly stochastic now checks rows/columns (reported fixed cerebis)","code":""},{"path":"/news/index.html","id":"seriation-12-2-05082017","dir":"Changelog","previous_headings":"","what":"seriation 1.2-2 (05/08/2017)","title":"seriation 1.2-2 (05/08/2017)","text":"CRAN release: 2017-05-09","code":""},{"path":"/news/index.html","id":"new-features-1-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"seriation 1.2-2 (05/08/2017)","text":"Added new seriation method SA provides simulated annealing criterion measures. Added criterion Cor_R (moment ordering algorithm Deutsch Martin). Added uniscale produce unidimensional scaling configuration given distance matrix permutation. Criterion gained parameter force_loss (default FALSE). Merit measures converted loss values multiplying -1. Added Supreme Court dataset.","code":""},{"path":"/news/index.html","id":"changes-and-bug-fixes-1-2-2","dir":"Changelog","previous_headings":"","what":"Changes and Bug Fixes","title":"seriation 1.2-2 (05/08/2017)","text":"Default seriate (dist) dissplot now “Spectral” since gives better tradeoff quality speed. Seriation method ARSA’s control argument nreps now consistency called reps. Criterion: dist objects now automatically converted similarity matrix , Moore_stress Neumann_stress. pimage now suppresses color key logical matrices checks NAs infinite entries. Correction: ARSA minimizes linear seriation criterion (man page vignette).","code":""},{"path":"/news/index.html","id":"seriation-12-1-08062016","dir":"Changelog","previous_headings":"","what":"seriation 1.2-1 (08/06/2016)","title":"seriation 1.2-1 (08/06/2016)","text":"CRAN release: 2016-08-07","code":""},{"path":"/news/index.html","id":"new-features-1-2-1","dir":"Changelog","previous_headings":"","what":"New features","title":"seriation 1.2-1 (08/06/2016)","text":"Added new distance measure called absolute pairwise rank differences.","code":""},{"path":"/news/index.html","id":"changes-and-bug-fixes-1-2-1","dir":"Changelog","previous_headings":"","what":"Changes and Bug Fixes","title":"seriation 1.2-1 (08/06/2016)","text":"default setting ser_dist ser_cor now reverse TRUE. pimage now work matrices containing single value. control parameters method TSP now correctly passed (reported David Aliyev).","code":""},{"path":"/news/index.html","id":"seriation-12-0-2222016","dir":"Changelog","previous_headings":"","what":"seriation 1.2-0 (2/22/2016)","title":"seriation 1.2-0 (2/22/2016)","text":"CRAN release: 2016-02-22","code":""},{"path":"/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"seriation 1.2-0 (2/22/2016)","text":"RGAR gained parameter pct specify window percentage. Added lazy path length criterion. Added banded anti-Robinson form (BAR) criterion. Added QAP_Inertia QAP_BAR solver. Added DendSer using register_DendSer(). Added GA using register_GA().","code":""},{"path":"/news/index.html","id":"changes-and-bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Changes and Bug Fixes","title":"seriation 1.2-0 (2/22/2016)","text":"Fixed RGAR (w needs [2,n-1]). Registry now warns modifies entries name. Registry now lists methods alphabetical order. Seriation method alias Chen removed. Use R2E.","code":""},{"path":"/news/index.html","id":"seriation-11-3-12182015","dir":"Changelog","previous_headings":"","what":"seriation 1.1-3 (12/18/2015)","title":"seriation 1.1-3 (12/18/2015)","text":"CRAN release: 2015-12-19 Added .robinson recognize (pre) Robinson matrices. Added random.robinson create random Robinson matrices. Added seriation methods “QAP_LS” “QAP_2SUM” (QAP-based seriation). Added criteria “LS” “2SUM” QAP-based seriation. Fixed Spectral_norm seriation. hmap now honors zlim also dendrogram-based maps. hmap gained option sym seriation based maps. showdist can now one “none” (default), “row”, “column”, “”. ser_cor ser_dist gained parameter y. ser_cor gained parameter test perform tests association. Added permute method hclust dendrogram objects.","code":""},{"path":"/news/index.html","id":"seriation-11-2-8232015","dir":"Changelog","previous_headings":"","what":"seriation 1.1-2 (8/23/2015)","title":"seriation 1.1-2 (8/23/2015)","text":"CRAN release: 2015-08-23 Argument (control …) check warns now instead throwing error. seriation_dist, seriation_cor seriation_align now shortened ser_dist, ser_cor ser_align. Method “ppc” now faster also available ser_cor. Fixed ser_cor “spearman” “Kendall” (uses now rank correctly). ser_cor ser_dist gained parameter reverse indicate permuations also tried reverse best value reported.","code":""},{"path":"/news/index.html","id":"seriation-11-1-712015","dir":"Changelog","previous_headings":"","what":"seriation 1.1-1 (7/1/2015)","title":"seriation 1.1-1 (7/1/2015)","text":"CRAN release: 2015-07-01 get_permutation_matrix added. seriation_dist measure “ppc” (positional proximity coefficient) added. Fixed bug permute ser_permutation_vectors. Identity permutations (NA) give now error get_order get_permutation_matrix. Fixed imports non-base R packages.","code":""},{"path":"/news/index.html","id":"seriation-11-0-06092015","dir":"Changelog","previous_headings":"","what":"seriation 1.1-0 (06/09/2015)","title":"seriation 1.1-0 (06/09/2015)","text":"CRAN release: 2015-06-10 Seriation method ‘Identity’ added. Seriation method ‘Random’ added. Seriation method ‘VAT’ added. Seriation methods ‘Spectral’ ‘Spectral_norm’ added. Seriation methods ‘PCA_angle’ ‘MDS_angle’ added. Seriation methods ‘SPIN_NH’ ‘SPIN_STS’ added. Several aliases seriation methods added. Criterion ‘RWGAR’ added. permutation_matrix2vector permutation_vector2matrix added. Identity permutation (value NA) added. ser_permutation ser_permutation_vector can now used interchangeably, get_rank permutation vectors added. seriation_dist seriation_alignment calculate dissimilarities seriation orders added. Wood data set added. CRAN release: 2015-06-10 create_lines_data, create_ordered_data added. pimage, hmap dissplot: Simplified made interfaces consistent (use now zlim, consistent default color palettes). pimage gained axes prop; NA matrix now works. seriation checks now control arguments consistently. use now package registry manage methods. reorder hclust added. iVAT path distance added. color palettes (bluered, greenred, grays) added. Improved speed C code. Problem testthat file names fixed. bburg.f/bbwrg.f: memory access problem fixed.","code":""},{"path":"/news/index.html","id":"seriation-10-14-12022014","dir":"Changelog","previous_headings":"","what":"seriation 1.0-14 (12/02/2014)","title":"seriation 1.0-14 (12/02/2014)","text":"CRAN release: 2014-12-03 arsa.f: removed 0 flag rand() compiles AIX (reported Lei Zhang) arsa.f/bburg.f/bbwrg.f: calls now R RNG compatible certain compilers (e.g., Intel FORTRAN) (reported Rohan Shah)","code":""},{"path":"/news/index.html","id":"seriation-10-13-3112014","dir":"Changelog","previous_headings":"","what":"seriation 1.0-13 (3/11/2014)","title":"seriation 1.0-13 (3/11/2014)","text":"CRAN release: 2014-03-11 Fixed dependence MASS","code":""},{"path":"/news/index.html","id":"seriation-10-12-2182014","dir":"Changelog","previous_headings":"","what":"seriation 1.0-12 (2/18/2014)","title":"seriation 1.0-12 (2/18/2014)","text":"CRAN release: 2014-02-19 ser_permutation_vectors can now reversed rev get_order: removed weird labels. use now testthat fixed bug intra-cluster ordering using silhouette width (reported Bettina Gruen) Cleaned dependencies: TSP, grid, cluster, gclus colorspace now imports instead dependencies.","code":""},{"path":"/news/index.html","id":"seriation-10-11-962013","dir":"Changelog","previous_headings":"","what":"seriation 1.0-11 (9/6/2013)","title":"seriation 1.0-11 (9/6/2013)","text":"CRAN release: 2013-09-06 service release.","code":""},{"path":"/news/index.html","id":"seriation-10-10-2152013","dir":"Changelog","previous_headings":"","what":"seriation 1.0-10 (2/15/2013)","title":"seriation 1.0-10 (2/15/2013)","text":"CRAN release: 2013-02-15 pimage now colorkey range argument fixed bug ARSA distance matrix contains 0s added PACKAGE argument .Fortran calls","code":""},{"path":"/news/index.html","id":"seriation-10-8-and-10-9-1162012","dir":"Changelog","previous_headings":"","what":"seriation 1.0-8 and 1.0-9 (11/6/2012)","title":"seriation 1.0-8 and 1.0-9 (11/6/2012)","text":"CRAN release: 2012-11-06 get_order: labels now correct order (Bug report Crt Ahlin) Replaced FORTRAN /O R /O verb=TRUE Fixed pop/newpage bug pimage.dist (reported Bettina Gruen)","code":""},{"path":"/news/index.html","id":"seriation-10-7-9252012","dir":"Changelog","previous_headings":"","what":"seriation 1.0-7 (9/25/2012)","title":"seriation 1.0-7 (9/25/2012)","text":"CRAN release: 2012-09-25 Fixed --bounds bug arsa.f (reported Rohan Shah) Fixed --bounds bug bburcg.f","code":""},{"path":"/news/index.html","id":"seriation-10-6-10192011","dir":"Changelog","previous_headings":"","what":"seriation 1.0-6 (10/19/2011)","title":"seriation 1.0-6 (10/19/2011)","text":"CRAN release: 2011-10-19 removed deprecated parameter gamma dissplot()","code":""},{"path":"/news/index.html","id":"seriation-10-5-922011","dir":"Changelog","previous_headings":"","what":"seriation 1.0-5 (9/2/2011)","title":"seriation 1.0-5 (9/2/2011)","text":"CRAN release: 2011-09-02 bertinplot(): fixed representation 0, neg. values highlight. (Bug report G. Sawitzki). bertinplot(): added panel.blocks option shading bertinplot(): added bertin_cut_line()","code":""},{"path":"/news/index.html","id":"seriation-10-4-6282011","dir":"Changelog","previous_headings":"","what":"seriation 1.0-4 (6/28/2011)","title":"seriation 1.0-4 (6/28/2011)","text":"CRAN release: 2011-06-28 pimage() now uses grid.raster. dissplot() now uses grid.raster.","code":""},{"path":"/news/index.html","id":"seriation-10-3-1142011","dir":"Changelog","previous_headings":"","what":"seriation 1.0-3 (1/14/2011)","title":"seriation 1.0-3 (1/14/2011)","text":"CRAN release: 2011-01-14 improved validity check permutations added check dist neg. entries seriate.dist.","code":""},{"path":"/news/index.html","id":"seriation-10-2-3132010","dir":"Changelog","previous_headings":"","what":"seriation 1.0-2 (3/13/2010)","title":"seriation 1.0-2 (3/13/2010)","text":"CRAN release: 2010-03-13 service release","code":""},{"path":"/news/index.html","id":"seriation-10-1-8252009","dir":"Changelog","previous_headings":"","what":"seriation 1.0-1 (8/25/2009)","title":"seriation 1.0-1 (8/25/2009)","text":"CRAN release: 2009-08-25 added drop=FALSE permute matrix. fixed reordering labels. added permute character. added different methods calculate cluster dissimilarities (min, max, avg, Hausdorff). dissplot now additional options hue, power, gamma, flip changed behavior averages. dissplot depends now colorspace.","code":""},{"path":"/news/index.html","id":"version-10-0-3242009","dir":"Changelog","previous_headings":"","what":"Version 1.0-0 (3/24/2009)","title":"Version 1.0-0 (3/24/2009)","text":"CRAN release: 2009-03-24 many changes first stable release.","code":""},{"path":"/news/index.html","id":"version-01-1-912007","dir":"Changelog","previous_headings":"","what":"Version 0.1-1 (9/1/2007)","title":"Version 0.1-1 (9/1/2007)","text":"CRAN release: 2007-08-30 Initial beta release.","code":""}]
